// <auto-generated />
using System;
using Artemis.Core.Monitor.Store;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Artemis.App.MonitorService.Migrations
{
    [DbContext(typeof(MonitorDbContext))]
    [Migration("20230414131107_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Artemis.Core.Monitor.Store.Entities.MetadataGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间,初始化后不再进行任何变更");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间,启用软删除时生效");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("数据键");

                    b.Property<int>("Partition")
                        .HasColumnType("INTEGER")
                        .HasComment("分区标识");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间,初始为创建时间");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("数据值");

                    b.HasKey("Id");

                    b.ToTable("MetadataGroups");
                });

            modelBuilder.Entity("Artemis.Core.Monitor.Store.Entities.MetadataItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间,初始化后不再进行任何变更");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间,启用软删除时生效");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("数据键");

                    b.Property<Guid>("MetadataGroupId")
                        .HasColumnType("uuid")
                        .HasComment("元数据组标识");

                    b.Property<int>("Partition")
                        .HasColumnType("INTEGER")
                        .HasComment("分区标识");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间,初始为创建时间");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("数据值");

                    b.HasKey("Id");

                    b.HasIndex("MetadataGroupId");

                    b.ToTable("MetadataItems");
                });

            modelBuilder.Entity("Artemis.Core.Monitor.Store.Entities.MonitorHost", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间,初始化后不再进行任何变更");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间,启用软删除时生效");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("主机名");

                    b.Property<string>("HostType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("主机类型");

                    b.Property<Guid?>("MetadataGroupId")
                        .HasColumnType("uuid")
                        .HasComment("元数据组标识");

                    b.Property<string>("OsName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("系统名");

                    b.Property<string>("OsVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("系统版本");

                    b.Property<int>("Partition")
                        .HasColumnType("INTEGER")
                        .HasComment("分区标识");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间,初始为创建时间");

                    b.HasKey("Id");

                    b.HasIndex("MetadataGroupId")
                        .IsUnique();

                    b.ToTable("MonitorHosts");
                });

            modelBuilder.Entity("Artemis.Core.Monitor.Store.Entities.MetadataItem", b =>
                {
                    b.HasOne("Artemis.Core.Monitor.Store.Entities.MetadataGroup", "MetadataGroup")
                        .WithMany("MetadataItems")
                        .HasForeignKey("MetadataGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataGroup");
                });

            modelBuilder.Entity("Artemis.Core.Monitor.Store.Entities.MonitorHost", b =>
                {
                    b.HasOne("Artemis.Core.Monitor.Store.Entities.MetadataGroup", "MetadataGroup")
                        .WithOne()
                        .HasForeignKey("Artemis.Core.Monitor.Store.Entities.MonitorHost", "MetadataGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MetadataGroup");
                });

            modelBuilder.Entity("Artemis.Core.Monitor.Store.Entities.MetadataGroup", b =>
                {
                    b.Navigation("MetadataItems");
                });
#pragma warning restore 612, 618
        }
    }
}
