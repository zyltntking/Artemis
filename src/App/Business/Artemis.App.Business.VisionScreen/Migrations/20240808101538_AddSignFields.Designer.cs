// <auto-generated />
using System;
using Artemis.Service.Business.VisionScreen.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Artemis.App.Business.VisionScreen.Migrations
{
    [DbContext(typeof(BusinessContext))]
    [Migration("20240808101538_AddSignFields")]
    partial class AddSignFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Business")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisNotificationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("BindingTag")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("绑定标记");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("Content")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasComment("通知内容");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<string>("EndType")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("端类型");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasComment("是否已读");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("消息读取时间");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasComment("任务标识");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("通知标题");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("用户标识");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisNotificationMessage");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisNotificationMessage_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisNotificationMessage_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisNotificationMessage_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisNotificationMessage_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisNotificationMessage_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisNotificationMessage_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisNotificationMessage_UpdatedAt");

                    b.ToTable("ArtemisNotificationMessage", "Business", t =>
                        {
                            t.HasComment("通知消息数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisOptometer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<double?>("LeftAstigmatism")
                        .HasColumnType("double precision")
                        .HasComment("左眼散光度数");

                    b.Property<double?>("LeftAxis")
                        .HasColumnType("double precision")
                        .HasComment("左眼轴位");

                    b.Property<double?>("LeftCornealCurvatureAngle1")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r1角度");

                    b.Property<double?>("LeftCornealCurvatureAngle2")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r2角度");

                    b.Property<double?>("LeftCornealCurvatureAstigmatism")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率散光度");

                    b.Property<double?>("LeftCornealCurvatureAverage")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率平均值(mm)");

                    b.Property<double?>("LeftCornealCurvatureAverageD")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率平均值(d)");

                    b.Property<double?>("LeftCornealCurvatureD1")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r1(d)");

                    b.Property<double?>("LeftCornealCurvatureD2")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r2(d)");

                    b.Property<double?>("LeftCornealCurvatureR1")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r1(mm)");

                    b.Property<double?>("LeftCornealCurvatureR2")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r2(mm)");

                    b.Property<double?>("LeftCylinder")
                        .HasColumnType("double precision")
                        .HasComment("左眼柱镜");

                    b.Property<int?>("LeftEquivalentSphere")
                        .HasColumnType("integer")
                        .HasComment("左眼等效球镜度数");

                    b.Property<double?>("LeftSphere")
                        .HasColumnType("double precision")
                        .HasComment("左眼球镜");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<DateTime?>("OptometerOperationTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("操作时间");

                    b.Property<string>("OptometerScreeningStuffName")
                        .HasColumnType("text")
                        .HasComment("筛查工作人员姓名");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<double?>("PupilDistance")
                        .HasColumnType("double precision")
                        .HasComment("瞳距");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid")
                        .HasComment("档案标识");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<double?>("RightAstigmatism")
                        .HasColumnType("double precision")
                        .HasComment("右眼散光度数");

                    b.Property<double?>("RightAxis")
                        .HasColumnType("double precision")
                        .HasComment("右眼轴位");

                    b.Property<double?>("RightCornealCurvatureAngle1")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r1角度");

                    b.Property<double?>("RightCornealCurvatureAngle2")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r2角度");

                    b.Property<double?>("RightCornealCurvatureAstigmatism")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率散光度");

                    b.Property<double?>("RightCornealCurvatureAverage")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率平均值(mm)");

                    b.Property<double?>("RightCornealCurvatureAverageD")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率平均值(d)");

                    b.Property<double?>("RightCornealCurvatureD1")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r1(d)");

                    b.Property<double?>("RightCornealCurvatureD2")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r2(d)");

                    b.Property<double?>("RightCornealCurvatureR1")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r1(mm)");

                    b.Property<double?>("RightCornealCurvatureR2")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r2(mm)");

                    b.Property<double?>("RightCylinder")
                        .HasColumnType("double precision")
                        .HasComment("右眼柱镜");

                    b.Property<int?>("RightEquivalentSphere")
                        .HasColumnType("integer")
                        .HasComment("右眼等效球径度数");

                    b.Property<double?>("RightSphere")
                        .HasColumnType("double precision")
                        .HasComment("右眼球镜");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisOptometer");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisOptometer_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisOptometer_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisOptometer_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisOptometer_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisOptometer_Partition");

                    b.HasIndex("RecordId");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisOptometer_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisOptometer_UpdatedAt");

                    b.ToTable("ArtemisOptometer", "Business", t =>
                        {
                            t.HasComment("验光仪数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisRecordFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("处理日期");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasComment("反馈内容");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<DateTime?>("FeedBackTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("反馈时间");

                    b.Property<bool>("IsCheck")
                        .HasColumnType("boolean")
                        .HasComment("是否已处理");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid")
                        .HasComment("记录标识");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("反馈用户标识");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisRecordFeedback");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisRecordFeedback_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisRecordFeedback_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisRecordFeedback_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisRecordFeedback_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisRecordFeedback_Partition");

                    b.HasIndex("RecordId");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisRecordFeedback_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisRecordFeedback_UpdatedAt");

                    b.ToTable("ArtemisRecordFeedback", "Business", t =>
                        {
                            t.HasComment("记录反馈数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisStudentEyePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("BothEyePhoto")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("双眼照片");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<string>("LeftEyePhoto")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("左眼照片");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<string>("RightEyePhoto")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("右眼照片");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisStudentEyePhoto");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisStudentEyePhoto_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisStudentEyePhoto_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisStudentEyePhoto_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisStudentEyePhoto_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisStudentEyePhoto_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisStudentEyePhoto_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisStudentEyePhoto_UpdatedAt");

                    b.ToTable("ArtemisStudentEyePhoto", "Business", t =>
                        {
                            t.HasComment("学生眼部照片数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisStudentRelationBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("关系");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasComment("学生标识");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("用户标识");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisStudentRelationBinding");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisStudentRelationBinding_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisStudentRelationBinding_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisStudentRelationBinding_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisStudentRelationBinding_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisStudentRelationBinding_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisStudentRelationBinding_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisStudentRelationBinding_UpdatedAt");

                    b.ToTable("ArtemisStudentRelationBinding", "Business", t =>
                        {
                            t.HasComment("用户学生亲属关系绑定数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasComment("年龄");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("生日");

                    b.Property<int>("ChartCheckedTimes")
                        .HasColumnType("integer")
                        .HasComment("电子视力表筛查次数");

                    b.Property<DateTime?>("ChartOperationTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("操作时间");

                    b.Property<string>("ChartScreeningStuffName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("筛查工作人员姓名");

                    b.Property<DateTime?>("CheckTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("筛查时间");

                    b.Property<string>("ClassCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("班级编码");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid")
                        .HasComment("班级标识");

                    b.Property<string>("ClassName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("班级名称");

                    b.Property<int?>("ClassSerialNumber")
                        .HasMaxLength(128)
                        .HasColumnType("integer")
                        .HasComment("班级序列号");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<string>("DivisionCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("行政区划编码");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid")
                        .HasComment("行政区划标识");

                    b.Property<string>("DivisionName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("行政区划名称");

                    b.Property<string>("DoctorAdvice")
                        .HasColumnType("text")
                        .HasComment("医嘱");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("医师姓名");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("text")
                        .HasComment("筛查结果");

                    b.Property<string>("Gender")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("性别");

                    b.Property<string>("GradeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("年级名称");

                    b.Property<Guid?>("HeadTeacherId")
                        .HasColumnType("uuid")
                        .HasComment("班主任标识");

                    b.Property<string>("HeadTeacherName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("班主任名称");

                    b.Property<bool>("IsChartChecked")
                        .HasColumnType("boolean")
                        .HasComment("是否已经过电子视力表筛查");

                    b.Property<bool>("IsFeedBack")
                        .HasColumnType("boolean")
                        .HasComment("是否反馈");

                    b.Property<bool>("IsOptometerChecked")
                        .HasColumnType("boolean")
                        .HasComment("是否已经过验光仪筛查");

                    b.Property<bool>("IsSign")
                        .HasColumnType("boolean")
                        .HasComment("是否签名");

                    b.Property<bool>("IsWareGlasses")
                        .HasColumnType("boolean")
                        .HasComment("是否佩戴眼镜");

                    b.Property<bool?>("IsWareLeftOkLenses")
                        .HasColumnType("boolean")
                        .HasComment("左眼是否佩戴角膜塑形镜");

                    b.Property<bool?>("IsWareRightOkLenses")
                        .HasColumnType("boolean")
                        .HasComment("右眼是否佩戴角膜塑形镜");

                    b.Property<double?>("LeftAstigmatism")
                        .HasColumnType("double precision")
                        .HasComment("左眼散光度数");

                    b.Property<double?>("LeftAxis")
                        .HasColumnType("double precision")
                        .HasComment("左眼轴位");

                    b.Property<double?>("LeftChartDistance")
                        .HasColumnType("double precision")
                        .HasComment("左眼与视力表的距离");

                    b.Property<double?>("LeftCornealCurvatureAngle1")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r1角度");

                    b.Property<double?>("LeftCornealCurvatureAngle2")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r2角度");

                    b.Property<double?>("LeftCornealCurvatureAstigmatism")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率散光度");

                    b.Property<double?>("LeftCornealCurvatureAverage")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率平均值(mm)");

                    b.Property<double?>("LeftCornealCurvatureAverageD")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率平均值(d)");

                    b.Property<double?>("LeftCornealCurvatureD1")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r1(d)");

                    b.Property<double?>("LeftCornealCurvatureD2")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r2(d)");

                    b.Property<double?>("LeftCornealCurvatureR1")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r1(mm)");

                    b.Property<double?>("LeftCornealCurvatureR2")
                        .HasColumnType("double precision")
                        .HasComment("左眼角膜曲率r2(mm)");

                    b.Property<double?>("LeftCorrectedVision")
                        .HasColumnType("double precision")
                        .HasComment("左眼矫正视力");

                    b.Property<double?>("LeftCylinder")
                        .HasColumnType("double precision")
                        .HasComment("左眼柱镜");

                    b.Property<int?>("LeftEquivalentSphere")
                        .HasColumnType("integer")
                        .HasComment("左眼等效球镜度数");

                    b.Property<string>("LeftEyeHyperopiaType")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("左眼远视类型");

                    b.Property<double?>("LeftNakedEyeVision")
                        .HasColumnType("double precision")
                        .HasComment("左眼裸眼视力");

                    b.Property<double?>("LeftSphere")
                        .HasColumnType("double precision")
                        .HasComment("左眼球镜");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<int>("OptometerCheckedTimes")
                        .HasColumnType("integer")
                        .HasComment("验光仪筛查次数");

                    b.Property<DateTime?>("OptometerOperationTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("操作时间");

                    b.Property<string>("OptometerScreeningStuffName")
                        .HasColumnType("text")
                        .HasComment("筛查工作人员姓名");

                    b.Property<string>("OrganizationCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("组织机构编码");

                    b.Property<string>("OrganizationDesignCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("组织机构设计编码");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasComment("组织机构标识");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("组织机构名称");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<DateTime?>("PrescribedTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("医嘱时间");

                    b.Property<double?>("PupilDistance")
                        .HasColumnType("double precision")
                        .HasComment("瞳距");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<DateTime?>("ReportReceiveTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("报告签收时间");

                    b.Property<string>("ReportReceiver")
                        .HasColumnType("text")
                        .HasComment("报告签收人");

                    b.Property<DateTime?>("ReportSendTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("报告发送时间");

                    b.Property<string>("ReportSender")
                        .HasColumnType("text")
                        .HasComment("报告发送人");

                    b.Property<double?>("RightAstigmatism")
                        .HasColumnType("double precision")
                        .HasComment("右眼散光度数");

                    b.Property<double?>("RightAxis")
                        .HasColumnType("double precision")
                        .HasComment("右眼轴位");

                    b.Property<double?>("RightChartDistance")
                        .HasColumnType("double precision")
                        .HasComment("右眼与视力表的距离");

                    b.Property<double?>("RightCornealCurvatureAngle1")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r1角度");

                    b.Property<double?>("RightCornealCurvatureAngle2")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r2角度");

                    b.Property<double?>("RightCornealCurvatureAstigmatism")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率散光度");

                    b.Property<double?>("RightCornealCurvatureAverage")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率平均值(mm)");

                    b.Property<double?>("RightCornealCurvatureAverageD")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率平均值(d)");

                    b.Property<double?>("RightCornealCurvatureD1")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r1(d)");

                    b.Property<double?>("RightCornealCurvatureD2")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r2(d)");

                    b.Property<double?>("RightCornealCurvatureR1")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r1(mm)");

                    b.Property<double?>("RightCornealCurvatureR2")
                        .HasColumnType("double precision")
                        .HasComment("右眼角膜曲率r2(mm)");

                    b.Property<double?>("RightCorrectedVision")
                        .HasColumnType("double precision")
                        .HasComment("右眼矫正视力");

                    b.Property<double?>("RightCylinder")
                        .HasColumnType("double precision")
                        .HasComment("右眼柱镜");

                    b.Property<int?>("RightEquivalentSphere")
                        .HasColumnType("integer")
                        .HasComment("右眼等效球径度数");

                    b.Property<string>("RightEyeHyperopiaType")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("右眼远视类型");

                    b.Property<double?>("RightNakedEyeVision")
                        .HasColumnType("double precision")
                        .HasComment("右眼裸眼视力");

                    b.Property<double?>("RightSphere")
                        .HasColumnType("double precision")
                        .HasComment("右眼球镜");

                    b.Property<string>("SchoolCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("学校编码");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid")
                        .HasComment("学校标识");

                    b.Property<string>("SchoolLength")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("学制");

                    b.Property<int?>("SchoolLengthValue")
                        .HasColumnType("integer")
                        .HasComment("学制值");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("学校名称");

                    b.Property<string>("SchoolType")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("学校类型");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("学生编号");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasComment("学生标识");

                    b.Property<string>("StudentName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("学生名称");

                    b.Property<string>("StudyPhase")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("学段");

                    b.Property<string>("TaskAgentCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务代理编码");

                    b.Property<Guid?>("TaskAgentId")
                        .HasColumnType("uuid")
                        .HasComment("任务代理标识");

                    b.Property<string>("TaskAgentName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务代理名称");

                    b.Property<string>("TaskAgentType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务代理类型");

                    b.Property<string>("TaskCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务编码");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasComment("任务标识");

                    b.Property<string>("TaskName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务名称");

                    b.Property<string>("TaskUnitCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务单元编码");

                    b.Property<Guid>("TaskUnitId")
                        .HasColumnType("uuid")
                        .HasComment("任务单元标识");

                    b.Property<string>("TaskUnitName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务单元名称");

                    b.Property<string>("TaskUnitTargetCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务目标编码");

                    b.Property<Guid>("TaskUnitTargetId")
                        .HasColumnType("uuid")
                        .HasComment("任务目标标识");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.Property<string>("UserSign")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("用户签名");

                    b.Property<Guid>("VisualStandardId")
                        .HasColumnType("uuid")
                        .HasComment("应用的视力标准标识");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisVisionScreenRecord");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_UpdatedAt");

                    b.ToTable("ArtemisVisionScreenRecord", "Business", t =>
                        {
                            t.HasComment("视力档案数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisVisualChart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<DateTime?>("ChartOperationTime")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("操作时间");

                    b.Property<string>("ChartScreeningStuffName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("筛查工作人员姓名");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<bool>("IsWareGlasses")
                        .HasColumnType("boolean")
                        .HasComment("是否佩戴眼镜");

                    b.Property<bool?>("IsWareLeftOkLenses")
                        .HasColumnType("boolean")
                        .HasComment("左眼是否佩戴角膜塑形镜");

                    b.Property<bool?>("IsWareRightOkLenses")
                        .HasColumnType("boolean")
                        .HasComment("右眼是否佩戴角膜塑形镜");

                    b.Property<double?>("LeftChartDistance")
                        .HasColumnType("double precision")
                        .HasComment("左眼与视力表的距离");

                    b.Property<double?>("LeftCorrectedVision")
                        .HasColumnType("double precision")
                        .HasComment("左眼矫正视力");

                    b.Property<string>("LeftEyeHyperopiaType")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("左眼远视类型");

                    b.Property<double?>("LeftNakedEyeVision")
                        .HasColumnType("double precision")
                        .HasComment("左眼裸眼视力");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid")
                        .HasComment("档案标识");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<double?>("RightChartDistance")
                        .HasColumnType("double precision")
                        .HasComment("右眼与视力表的距离");

                    b.Property<double?>("RightCorrectedVision")
                        .HasColumnType("double precision")
                        .HasComment("右眼矫正视力");

                    b.Property<string>("RightEyeHyperopiaType")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasComment("右眼远视类型");

                    b.Property<double?>("RightNakedEyeVision")
                        .HasColumnType("double precision")
                        .HasComment("右眼裸眼视力");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisVisualChart");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisVisualChart_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisVisualChart_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisVisualChart_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisVisualChart_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisVisualChart_Partition");

                    b.HasIndex("RecordId");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisVisualChart_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisVisualChart_UpdatedAt");

                    b.ToTable("ArtemisVisualChart", "Business", t =>
                        {
                            t.HasComment("视力表数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisOptometer", b =>
                {
                    b.HasOne("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", "VisionScreenRecord")
                        .WithMany("Optometers")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisOptometer_ArtemisVisionScreenRecord");

                    b.Navigation("VisionScreenRecord");
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisRecordFeedback", b =>
                {
                    b.HasOne("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", "VisionScreenRecord")
                        .WithMany("RecordFeedbacks")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisRecordFeedback_ArtemisVisionScreenRecord");

                    b.Navigation("VisionScreenRecord");
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisVisualChart", b =>
                {
                    b.HasOne("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", "VisionScreenRecord")
                        .WithMany("VisualCharts")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisVisualChart_ArtemisVisionScreenRecord");

                    b.Navigation("VisionScreenRecord");
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", b =>
                {
                    b.Navigation("Optometers");

                    b.Navigation("RecordFeedbacks");

                    b.Navigation("VisualCharts");
                });
#pragma warning restore 612, 618
        }
    }
}
