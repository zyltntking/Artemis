// <auto-generated />
using System;
using Artemis.Service.Business.VisionScreen.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Artemis.App.Business.VisionScreen.Migrations
{
    [DbContext(typeof(BusinessContext))]
    [Migration("20240807024629_ChangeDataTypes")]
    partial class ChangeDataTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Business")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisOptometer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<double?>("LeftAstigmatism")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftAxis")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAngle1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAngle2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAstigmatism")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAverage")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAverageD")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureD1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureD2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureR1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureR2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCylinder")
                        .HasColumnType("double precision");

                    b.Property<int?>("LeftEquivalentSphere")
                        .HasColumnType("integer");

                    b.Property<double?>("LeftSphere")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<DateTime?>("OptometerOperationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OptometerScreeningStuffName")
                        .HasColumnType("text");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<double?>("PupilDistance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<double?>("RightAstigmatism")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightAxis")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAngle1")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAngle2")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAstigmatism")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAverage")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAverageD")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureD1")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureD2")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureR1")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureR2")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCylinder")
                        .HasColumnType("double precision");

                    b.Property<int?>("RightEquivalentSphere")
                        .HasColumnType("integer");

                    b.Property<double?>("RightSphere")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisOptometer");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisOptometer_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisOptometer_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisOptometer_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisOptometer_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisOptometer_Partition");

                    b.HasIndex("RecordId");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisOptometer_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisOptometer_UpdatedAt");

                    b.ToTable("ArtemisOptometer", "Business", t =>
                        {
                            t.HasComment("验光仪数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int>("ChartCheckedTimes")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ChartOperationTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("ChartScreeningStuffName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CheckTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("ClassCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<int?>("ClassSerialNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<string>("DivisionCode")
                        .HasColumnType("text");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("DivisionName")
                        .HasColumnType("text");

                    b.Property<string>("DoctorAdvice")
                        .HasColumnType("text");

                    b.Property<string>("DoctorName")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("GradeName")
                        .HasColumnType("text");

                    b.Property<Guid?>("HeadTeacherId")
                        .HasColumnType("uuid");

                    b.Property<string>("HeadTeacherName")
                        .HasColumnType("text");

                    b.Property<bool>("IsChartChecked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOptometerChecked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWareGlasses")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWareLeftOkLenses")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWareRightOkLenses")
                        .HasColumnType("boolean");

                    b.Property<double?>("LeftAstigmatism")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftAxis")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftChartDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAngle1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAngle2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAstigmatism")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAverage")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureAverageD")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureD1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureD2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureR1")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCornealCurvatureR2")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCorrectedVision")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCylinder")
                        .HasColumnType("double precision");

                    b.Property<int?>("LeftEquivalentSphere")
                        .HasColumnType("integer");

                    b.Property<string>("LeftEyeHyperopiaType")
                        .HasColumnType("text");

                    b.Property<double?>("LeftNakedEyeVision")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftSphere")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<int>("OptometerCheckedTimes")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OptometerOperationTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("OptometerScreeningStuffName")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationCode")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationDesignCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<DateTime?>("PrescribedTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<double?>("PupilDistance")
                        .HasColumnType("double precision");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<DateTime?>("ReportReceiveTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("ReportReceiver")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReportSendTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("ReportSender")
                        .HasColumnType("text");

                    b.Property<double?>("RightAstigmatism")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightAxis")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightChartDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAngle1")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAngle2")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAstigmatism")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAverage")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureAverageD")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureD1")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureD2")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureR1")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCornealCurvatureR2")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCorrectedVision")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCylinder")
                        .HasColumnType("double precision");

                    b.Property<int?>("RightEquivalentSphere")
                        .HasColumnType("integer");

                    b.Property<string>("RightEyeHyperopiaType")
                        .HasColumnType("text");

                    b.Property<double?>("RightNakedEyeVision")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightSphere")
                        .HasColumnType("double precision");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("text");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("SchoolLength")
                        .HasColumnType("text");

                    b.Property<int?>("SchoolLengthValue")
                        .HasColumnType("integer");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchoolType")
                        .HasColumnType("text");

                    b.Property<string>("StudentCode")
                        .HasColumnType("text");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentName")
                        .HasColumnType("text");

                    b.Property<string>("StudyPhase")
                        .HasColumnType("text");

                    b.Property<string>("TaskAgentCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("TaskAgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskAgentName")
                        .HasColumnType("text");

                    b.Property<string>("TaskAgentType")
                        .HasColumnType("text");

                    b.Property<string>("TaskCode")
                        .HasColumnType("text");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskName")
                        .HasColumnType("text");

                    b.Property<string>("TaskUnitCode")
                        .HasColumnType("text");

                    b.Property<Guid>("TaskUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskUnitName")
                        .HasColumnType("text");

                    b.Property<string>("TaskUnitTargetCode")
                        .HasColumnType("text");

                    b.Property<Guid>("TaskUnitTargetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.Property<Guid>("VisualStandardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisVisionScreenRecord");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisVisionScreenRecord_UpdatedAt");

                    b.ToTable("ArtemisVisionScreenRecord", "Business", t =>
                        {
                            t.HasComment("视力档案数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisVisualChart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<DateTime?>("ChartOperationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChartScreeningStuffName")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<bool>("IsChartChecked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWareGlasses")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWareLeftOkLenses")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWareRightOkLenses")
                        .HasColumnType("boolean");

                    b.Property<double?>("LeftChartDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCorrectedVision")
                        .HasColumnType("double precision");

                    b.Property<string>("LeftEyeHyperopiaType")
                        .HasColumnType("text");

                    b.Property<double?>("LeftNakedEyeVision")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifyBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("RemoveBy")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("删除者标识");

                    b.Property<double?>("RightChartDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightCorrectedVision")
                        .HasColumnType("double precision");

                    b.Property<string>("RightEyeHyperopiaType")
                        .HasColumnType("text");

                    b.Property<double?>("RightNakedEyeVision")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisVisualChart");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisVisualChart_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisVisualChart_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisVisualChart_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisVisualChart_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisVisualChart_Partition");

                    b.HasIndex("RecordId");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisVisualChart_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisVisualChart_UpdatedAt");

                    b.ToTable("ArtemisVisualChart", "Business", t =>
                        {
                            t.HasComment("视力表数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisOptometer", b =>
                {
                    b.HasOne("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", "VisionScreenRecord")
                        .WithMany("Optometers")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisOptometer_ArtemisVisionScreenRecord");

                    b.Navigation("VisionScreenRecord");
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisVisualChart", b =>
                {
                    b.HasOne("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", "VisionScreenRecord")
                        .WithMany("VisualCharts")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisVisualChart_ArtemisVisionScreenRecord");

                    b.Navigation("VisionScreenRecord");
                });

            modelBuilder.Entity("Artemis.Service.Business.VisionScreen.Context.ArtemisVisionScreenRecord", b =>
                {
                    b.Navigation("Optometers");

                    b.Navigation("VisualCharts");
                });
#pragma warning restore 612, 618
        }
    }
}
