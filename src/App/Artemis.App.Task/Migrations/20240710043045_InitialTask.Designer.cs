// <auto-generated />
using System;
using Artemis.Service.Task.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Artemis.App.Task.Migrations
{
    [DbContext(typeof(TaskContext))]
    [Migration("20240710043045_InitialTask")]
    partial class InitialTask
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Task")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisAgent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("AgentCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("代理编码");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("代理名称");

                    b.Property<string>("AgentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("代理类型");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("UUID")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<Guid>("ModifyBy")
                        .HasColumnType("UUID")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<Guid>("RemoveBy")
                        .HasColumnType("UUID")
                        .HasComment("删除者标识");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisAgent");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisAgent_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisAgent_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisAgent_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisAgent_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisAgent_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisAgent_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisAgent_UpdatedAt");

                    b.ToTable("ArtemisAgent", "Task", t =>
                        {
                            t.HasComment("代理数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("UUID")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("任务描述");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("任务结束时间");

                    b.Property<Guid>("ModifyBy")
                        .HasColumnType("UUID")
                        .HasComment("更新者标识");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasComment("父任务标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<Guid>("RemoveBy")
                        .HasColumnType("UUID")
                        .HasComment("删除者标识");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("任务开始时间");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("任务名称");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务状态");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisTask");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisTask_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisTask_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisTask_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisTask_ModifyBy");

                    b.HasIndex("ParentId");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisTask_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisTask_RemoveBy");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisTask_UpdatedAt");

                    b.ToTable("ArtemisTask", "Task", t =>
                        {
                            t.HasComment("任务数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTaskAgent", b =>
                {
                    b.Property<Guid>("TaskUnitId")
                        .HasColumnType("uuid")
                        .HasComment("任务单元标识");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid")
                        .HasComment("代理标识");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasComment("任务标识");

                    b.HasKey("TaskUnitId", "AgentId")
                        .HasName("PK_ArtemisTaskAgent");

                    b.HasIndex("AgentId");

                    b.HasIndex("TaskId");

                    b.ToTable("ArtemisTaskAgent", "Task", t =>
                        {
                            t.HasComment("任务代理配置");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTaskTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("UUID")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("任务描述");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("任务结束时间");

                    b.Property<Guid>("ModifyBy")
                        .HasColumnType("UUID")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<Guid>("RemoveBy")
                        .HasColumnType("UUID")
                        .HasComment("删除者标识");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("任务开始时间");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid")
                        .HasComment("目标标识");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasComment("任务标识");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务状态");

                    b.Property<Guid>("TaskUnitId")
                        .HasColumnType("uuid")
                        .HasComment("任务单元标识");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisTaskTarget");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisTaskTarget_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisTaskTarget_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisTaskTarget_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisTaskTarget_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisTaskTarget_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisTaskTarget_RemoveBy");

                    b.HasIndex("TaskUnitId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisTaskTarget_UpdatedAt");

                    b.ToTable("ArtemisTaskTarget", "Task", t =>
                        {
                            t.HasComment("任务目标数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTaskUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("标识");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasComment("并发锁");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("UUID")
                        .HasComment("创建者标识");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("删除时间");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("任务描述");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("任务结束时间");

                    b.Property<Guid>("ModifyBy")
                        .HasColumnType("UUID")
                        .HasComment("更新者标识");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasComment("分区标识");

                    b.Property<Guid>("RemoveBy")
                        .HasColumnType("UUID")
                        .HasComment("删除者标识");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("任务开始时间");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasComment("任务标识");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("任务状态");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("任务单元名称");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasComment("更新时间");

                    b.HasKey("Id")
                        .HasName("PK_ArtemisTaskUnit");

                    b.HasIndex("CreateBy")
                        .HasDatabaseName("IX_ArtemisTaskUnit_CreateBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArtemisTaskUnit_CreatedAt");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_ArtemisTaskUnit_DeletedAt");

                    b.HasIndex("ModifyBy")
                        .HasDatabaseName("IX_ArtemisTaskUnit_ModifyBy");

                    b.HasIndex("Partition")
                        .HasDatabaseName("IX_ArtemisTaskUnit_Partition");

                    b.HasIndex("RemoveBy")
                        .HasDatabaseName("IX_ArtemisTaskUnit_RemoveBy");

                    b.HasIndex("TaskId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ArtemisTaskUnit_UpdatedAt");

                    b.ToTable("ArtemisTaskUnit", "Task", t =>
                        {
                            t.HasComment("任务单元数据集");
                        });
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTask", b =>
                {
                    b.HasOne("Artemis.Service.Task.Context.ArtemisTask", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ArtemisTask_ArtemisTask");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTaskAgent", b =>
                {
                    b.HasOne("Artemis.Service.Task.Context.ArtemisAgent", "Agent")
                        .WithMany("TaskAgents")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisTaskAgent_ArtemisAgent");

                    b.HasOne("Artemis.Service.Task.Context.ArtemisTask", "Task")
                        .WithMany("TaskAgents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisTaskAgent_ArtemisTask");

                    b.HasOne("Artemis.Service.Task.Context.ArtemisTaskUnit", "TaskUnit")
                        .WithMany("TaskAgents")
                        .HasForeignKey("TaskUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisTaskAgent_ArtemisTaskUnit");

                    b.Navigation("Agent");

                    b.Navigation("Task");

                    b.Navigation("TaskUnit");
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTaskTarget", b =>
                {
                    b.HasOne("Artemis.Service.Task.Context.ArtemisTaskUnit", "TaskUnit")
                        .WithMany("TaskTargets")
                        .HasForeignKey("TaskUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisTaskTarget_ArtemisTaskUnit");

                    b.Navigation("TaskUnit");
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTaskUnit", b =>
                {
                    b.HasOne("Artemis.Service.Task.Context.ArtemisTask", "Task")
                        .WithMany("TaskUnits")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArtemisTaskUnit_ArtemisTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisAgent", b =>
                {
                    b.Navigation("TaskAgents");
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTask", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("TaskAgents");

                    b.Navigation("TaskUnits");
                });

            modelBuilder.Entity("Artemis.Service.Task.Context.ArtemisTaskUnit", b =>
                {
                    b.Navigation("TaskAgents");

                    b.Navigation("TaskTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
