<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Artemis.Data.Store</name>
    </assembly>
    <members>
        <member name="T:Artemis.Data.Store.Configuration.ArtemisPartitionConfiguration`1">
            <summary>
                模型存储配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisPartitionConfiguration`1.FieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisPartitionConfiguration`1.RelationConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.ArtemisModelConfiguration`1">
            <summary>
                模型存储配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisModelConfiguration`1.FieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.ArtemisMateSlotConfiguration`1">
            <summary>
                ArtemisMateSlot
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisMateSlotConfiguration`1.FieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.ArtemisKeySlotConfiguration`1">
            <summary>
                ArtemisKeySlot类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisKeySlotConfiguration`1.FieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.ArtemisConfiguration`1">
            <summary>
                Artemis抽象类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.ArtemisConfiguration`1.DbType">
            <summary>
                数据库类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.ArtemisConfiguration`1.DataTypeSet">
            <summary>
                数据类型集合访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.ArtemisConfiguration`1.DataSetDescription">
            <summary>
                数据集描述
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisConfiguration`1.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                Configures the entity of type <typeparamref name="TEntity" />.
            </summary>
            <param name="builder">The builder to be used to configure the entity type.</param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisConfiguration`1.TableConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                表配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisConfiguration`1.FieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ArtemisConfiguration`1.RelationConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.DataTypeAdapter">
            <summary>
                数据类型适配器
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DataTypeAdapter._dataTypeDictionary">
            <summary>
                数据类型缓存
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeAdapter.DataTypeDictionary">
            <summary>
                数据类型访问器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.DataTypeAdapter.GetDataTypeSet(Artemis.Data.Store.DbType)">
            <summary>
                获取数据类型集
            </summary>
            <param name="dbType">数据库类型</param>
            <returns>数据类型集</returns>
        </member>
        <member name="T:Artemis.Data.Store.DataTypeSet">
            <summary>
                数据类型集
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.DateTime">
            <summary>
                DateTime数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Boolean">
            <summary>
                Boolean数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Integer">
            <summary>
                Integer数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Long">
            <summary>
                Long数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Double">
            <summary>
                Double数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.StringTemplate">
            <summary>
                String数据类型
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.DataTypeSet.String(System.Int32)">
            <summary>
                获取String数据类型
            </summary>
            <param name="length">字段长度</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.DbType">
            <summary>
                数据库类型
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.Unknown">
            <summary>
                Unknown
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.Oracle">
            <summary>
                Oracle
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.SqlServer">
            <summary>
                SqlServer
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.MySql">
            <summary>
                MySql
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.PostgreSql">
            <summary>
                PostgreSql
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.Sqlite">
            <summary>
                Sqlite
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.DbType.#ctor(System.Int32,System.String)">
            <summary>
                构造函数
            </summary>
            <param name="id">枚举Id</param>
            <param name="name">枚举名称</param>
        </member>
        <member name="T:Artemis.Data.Store.IManager`1">
            <summary>
                提供用于管理TEntity的存储器的API接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IManager`2">
            <summary>
                提供用于管理TEntity的存储器的API接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStore`1">
            <summary>
                存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStore`2">
            <summary>
                存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStoreAccess`1">
            <summary>
                通用存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStoreAccess`2">
            <summary>
                存储数据访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreAccess`2.EntitySet">
            <summary>
                EntitySet访问器*Main Store Set*
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreAccess`2.TrackingQuery">
            <summary>
                Entity有追踪访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreAccess`2.EntityQuery">
            <summary>
                Entity无追踪访问器
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.IStoreBase`1">
            <summary>
                可映射存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStoreBase`2">
            <summary>
                基本存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.IStoreBase`2.GetId(`0)">
            <summary>
                获取指定实体Id
            </summary>
            <param name="entity">实体</param>
            <returns>Id</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreBase`2.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
                获取指定实体Id
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步操作的信号</param>
            <returns>Id</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreBase`2.GetIdString(`0)">
            <summary>
                获取指定实体Id字符串
            </summary>
            <param name="entity">实体</param>
            <returns>Id字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreBase`2.GetIdStringAsync(`0,System.Threading.CancellationToken)">
            <summary>
                获取指定实体Id字符串
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步操作信号</param>
            <returns>Id字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreBase`2.IsDeleted(`0)">
            <summary>
                是否被删除
            </summary>
            <param name="entity">实体</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreBase`2.IsDeletedAsync(`0,System.Threading.CancellationToken)">
            <summary>
                是否被删除
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns>判断结果</returns>
        </member>
        <member name="T:Artemis.Data.Store.IStoreCommon`1">
            <summary>
                通用存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStoreCommon`2">
            <summary>
                通用存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.SetOptions(Artemis.Data.Store.IStoreOptions)">
            <summary>
                设置配置
            </summary>
            <param name="storeOptions"></param>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Create(`0)">
            <summary>
                在<paramref name="entity" />存储中创建一个新的实体
            </summary>
            <param name="entity">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中创建多个新的实体
            </summary>
            <param name="entities">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中创建一个新的实体
            </summary>
            <param name="entity">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.CreateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中创建多个新的实体
            </summary>
            <param name="entities">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Update(`0)">
            <summary>
                在<paramref name="entity" />存储中更新已存在的实体
            </summary>
            <param name="entity">被更新实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中更新多个已存在的实体
            </summary>
            <param name="entities">被更新实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中更新已存在的实体
            </summary>
            <param name="entity">被更新实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中更新多个已存在的实体
            </summary>
            <param name="entities">被更新实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdate(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                更新存储中的实体
            </summary>
            <param name="id">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdate(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="ids">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdate(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                在存储中更新符合条件的实体
            </summary>
            <param name="setter">更新行为</param>
            <param name="predicate">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdate(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                在存储中更新符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdateAsync(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="id">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdateAsync(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="ids">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdateAsync(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新符合条件的实体
            </summary>
            <param name="setter">更新行为</param>
            <param name="predicate">查询表达式</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdateAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Delete(`1)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Delete(`0)">
            <summary>
                在<paramref name="entity" />存储中删除已存在的实体
            </summary>
            <param name="entity">被删除实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Delete(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中删除已存在的实体
            </summary>
            <param name="entities">被删除实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.DeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中删除已存在的实体
            </summary>
            <param name="entity">被删除实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.DeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中删除已存在的实体
            </summary>
            <param name="entities">被删除实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDelete(`1)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDelete(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                在存储中删除符合条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDelete(System.Linq.IQueryable{`0})">
            <summary>
                在存储中删除符合查询描述的实体
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                在存储中删除符合条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDeleteAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
            <summary>
                在存储中删除符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntity(`1)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntityViaKey(System.String)">
            <summary>
                根据缓存键查找实体
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntities(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntitiesViaKeys(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                根据缓存键查找实体
            </summary>
            <param name="keys">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntityAsync(`1,System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntitiesAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IStoreErrorDescriber">
            <summary>
                存储异常描述接口
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.DefaultError">
            <summary>
                生成默认异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.ConcurrencyFailure">
            <summary>
                提示并发失败异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.NotFoundId(System.String)">
            <summary>
                提示未找到Id失败
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.EnableCache">
            <summary>
                提示已允许具缓存策略
            </summary>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IStoreMap`1">
            <summary>
                可映射存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStoreMap`2">
            <summary>
                可映射存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.CreateNew``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.CreateNew``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射创建一组新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.CreateNewAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.CreateNewAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Over``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Over``1(``0,`0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Over``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Over``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.OverAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.OverAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.OverAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.OverAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Merge``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Merge``1(``0,`0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Merge``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.MergeAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.MergeAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.MergeAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.MergeAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IStoreOptions">
            <summary>
                存储配置接口
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.AutoSaveChanges">
            <summary>
                是否启用自动保存
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.MetaDataHosting">
            <summary>
                是否启用元数据托管
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.SoftDelete">
            <summary>
                是否启用软删除
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.CachedStore">
            <summary>
                是否启用具缓存策略
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.Expires">
            <summary>
                过期时间(秒)
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.DebugLogger">
            <summary>
                是否启用Debug日志
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.Manager`1">
            <summary>
                提供用于管理TEntity的存储器的API
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Manager`1.#ctor(Artemis.Data.Store.IStore{`0},Microsoft.Extensions.Options.IOptions{Artemis.Data.Store.IStoreOptions},Artemis.Data.Store.IStoreErrorDescriber,Microsoft.Extensions.Logging.ILogger{Artemis.Data.Store.IManager{`0}})">
            <summary>
                创建新的管理器实例
            </summary>
            <param name="store">存储访问器依赖</param>
            <param name="optionsAccessor">配置依赖</param>
            <param name="errors">错误依赖</param>
            <param name="logger">日志依赖</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Artemis.Data.Store.Manager`2">
            <summary>
                提供用于管理TEntity的存储器的API
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Manager`2.#ctor(Artemis.Data.Store.IStore{`0,`1},Microsoft.Extensions.Options.IOptions{Artemis.Data.Store.IStoreOptions},Artemis.Data.Store.IStoreErrorDescriber,Microsoft.Extensions.Logging.ILogger{Artemis.Data.Store.IManager{`0,`1}})">
            <summary>
                创建新的管理器实例
            </summary>
            <param name="store">存储访问器依赖</param>
            <param name="optionsAccessor">配置依赖</param>
            <param name="errors">错误依赖</param>
            <param name="logger">日志依赖</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Artemis.Data.Store.Manager`2.Store">
            <summary>
                存储访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Manager`2.StoreOptions">
            <summary>
                配置访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Manager`2.StoreErrorDescriber">
            <summary>
                错误报告生成器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Manager`2.Logger">
            <summary>
                日志依赖访问器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Manager`2.ThrowIfDisposed">
            <summary>
                Throws if this class has been disposed.
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.Manager`2._disposed">
            <summary>
                标记资源是否已被或是否需要释放
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Manager`2.Dispose">
            <summary>
                Releases all resources used by the user manager.
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Manager`2.Dispose(System.Boolean)">
            <summary>
                Releases the unmanaged resources used by the role manager and optionally releases the managed resources.
            </summary>
            <param name="disposing">
                true to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:Artemis.Data.Store.Manager`2.StoreDispose">
            <summary>
                释放托管的Store
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.MapTargetNullException">
            <summary>
                Represents errors that occur during an interop call from .NET to MapTargetNull.
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.MapTargetNullException.#ctor(System.String)">
            <summary>
                Constructs an instance of <see cref="T:Artemis.Data.Store.MapTargetNullException" />.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Artemis.Data.Store.MapTargetNullException.#ctor(System.String,System.Exception)">
            <summary>
                Constructs an instance of <see cref="T:Artemis.Data.Store.MapTargetNullException" />.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Artemis.Data.Store.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.ConcurrencyFailure">
            <summary>
              查找类似 乐观并发失败，对象已被修改。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.DefaultError">
            <summary>
              查找类似 发生未知异常。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.EnableCache">
            <summary>
              查找类似 当前Store已启用具缓存策略。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.NotFoundId">
            <summary>
              查找类似 未查询到Id为 &apos;{0}&apos; 的对象。 的本地化字符串。
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Resources.FormatNotFoundId(System.String)">
            <summary>
              格式化 未查询到Id为 &apos;{0}&apos; 的对象。 的本地化字符串。
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.Store`1">
            <summary>
                抽象存储实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Store`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.IStoreErrorDescriber)">
            <summary>
                创建一个新的基本存储实例
            </summary>
            <param name="context">数据访问上下文</param>
            <param name="logger">日志依赖</param>
            <param name="describer">操作异常描述者</param>
            <param name="cache">缓存依赖</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.Store`1.ConvertIdFromString(System.String)">
            <summary>
                转换字符串到id
            </summary>
            <param name="id">id字符串</param>
            <returns>id</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`1.ConvertIdToString(System.Guid)">
            <summary>
                转换Id为字符串
            </summary>
            <param name="id">id</param>
            <returns>字符串</returns>
        </member>
        <member name="T:Artemis.Data.Store.Store`2">
            <summary>
                抽象存储实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">数据上下文类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.#ctor(Microsoft.EntityFrameworkCore.DbContext,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.IStoreErrorDescriber)">
            <summary>
                创建一个新的基本存储实例
            </summary>
            <param name="context">数据访问上下文</param>
            <param name="logger">日志依赖</param>
            <param name="describer">操作异常描述者</param>
            <param name="cache">缓存依赖</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Artemis.Data.Store.Store`3">
            <summary>
                抽象存储实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TContext">数据上下文类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.#ctor(`1,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.IStoreErrorDescriber)">
            <summary>
                创建一个新的基本存储实例
            </summary>
            <param name="context">数据访问上下文</param>
            <param name="logger">日志依赖</param>
            <param name="describer">操作异常描述者</param>
            <param name="cache">缓存依赖</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.SetDebugLog(System.String)">
            <summary>
                设置Debug日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.Context">
            <summary>
                数据访问上下文
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.Cache">
            <summary>
                缓存依赖
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.Logger">
            <summary>
                日志依赖
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.EntitySet">
            <summary>
                EntitySet访问器*Main Store Set*
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.TrackingQuery">
            <summary>
                Entity有追踪访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.EntityQuery">
            <summary>
                Entity无追踪访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.CacheOption">
            <summary>
                缓存选项
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.CacheEntity(`0)">
            <summary>
                缓存实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.CacheEntities(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                缓存实体
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.GetEntity(System.String)">
            <summary>
                获取实体
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.GetEntities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                获取实体
            </summary>
            <param name="keys">实体键列表</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.RemoveCachedEntity(`0)">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.RemoveCachedEntities(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.SaveChanges">
            <summary>
                保存当前存储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
                保存当前存储
            </summary>
            <param name="cancellationToken">操作取消信号</param>
            <returns>异步取消结果</returns>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.AutoSaveChanges">
            <summary>
                设置是否自动保存更改
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.Store`3._metaDataHosting">
            <summary>
                MetaDataHosting标记
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.MetaDataHosting">
            <summary>
                设置是否启用元数据托管
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.Store`3._softDelete">
            <summary>
                SoftDelete标记
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.SoftDelete">
            <summary>
                设置是否启用软删除
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.CachedStore">
            <summary>
                是否启用具缓存策略
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.Store`3._expires">
            <summary>
                过期时间(秒)
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.Expires">
            <summary>
                过期时间(秒)
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Store`3.DebugLogger">
            <summary>
                是否启用Debug日志
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.SetOptions(Artemis.Data.Store.IStoreOptions)">
            <summary>
                设置配置
            </summary>
            <param name="storeOptions"></param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Create(`0)">
            <summary>
                在<paramref name="entity" />存储中创建一个新的实体
            </summary>
            <param name="entity">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中创建多个新的实体
            </summary>
            <param name="entities">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中创建一个新的实体
            </summary>
            <param name="entity">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.CreateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中创建多个新的实体
            </summary>
            <param name="entities">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Update(`0)">
            <summary>
                在<paramref name="entity" />存储中更新已存在的实体
            </summary>
            <param name="entity">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中更新多个已存在的实体
            </summary>
            <param name="entities">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中更新已存在的实体
            </summary>
            <param name="entity">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中更新多个已存在的实体
            </summary>
            <param name="entities">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdate(`2,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                更新存储中的实体
            </summary>
            <param name="id">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdate(System.Collections.Generic.IEnumerable{`2},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="ids">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdate(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                在存储中更新符合条件的实体
            </summary>
            <param name="setter">更新行为</param>
            <param name="predicate">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdate(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                在存储中更新符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdateAsync(`2,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="id">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdateAsync(System.Collections.Generic.IEnumerable{`2},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="ids">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdateAsync(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新符合条件的实体
            </summary>
            <param name="setter">更新行为</param>
            <param name="predicate">查询表达式</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdateAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Delete(`2)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Delete(`0)">
            <summary>
                在<paramref name="entity" />存储中删除已存在的实体
            </summary>
            <param name="entity">被删除实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Delete(System.Collections.Generic.IEnumerable{`2})">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中删除已存在的实体
            </summary>
            <param name="entities">被删除实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.DeleteAsync(`2,System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中删除已存在的实体
            </summary>
            <param name="entity">被删除实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.DeleteAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中删除已存在的实体
            </summary>
            <param name="entities">被删除实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDelete(`2)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDelete(System.Collections.Generic.IEnumerable{`2})">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                在存储中删除符合条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDelete(System.Linq.IQueryable{`0})">
            <summary>
                在存储中删除符合查询描述的实体
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDeleteAsync(`2,System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDeleteAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                在存储中删除符合条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDeleteAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
            <summary>
                在存储中删除符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindEntity(`2)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindEntityViaKey(System.String)">
            <summary>
                根据缓存键查找实体
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindEntities(System.Collections.Generic.IEnumerable{`2})">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindEntitiesViaKeys(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                根据缓存键查找实体
            </summary>
            <param name="keys">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindEntityAsync(`2,System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindEntitiesAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.CreateNew``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns>映射后实体</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.CreateNew``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射创建一组新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.CreateNewAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.CreateNewAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Over``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Over``1(``0,`0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Over``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Over``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标连接键选择器</param>
            <param name="config">映射配置</param>
            <param name="sourceKeySelector">源连接键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.OverAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.OverAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.OverAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.OverAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Merge``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Merge``1(``0,`0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Merge``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.MergeAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.MergeAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.MergeAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.MergeAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="F:Artemis.Data.Store.Store`3._ignoreIdAndNullConfig">
            <summary>
                id和空值忽略缓存
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.IgnoreIdAndNullConfig``1">
            <summary>
                空值或空字符值忽略缓存
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Artemis.Data.Store.Store`3._ignoreNullConfig">
            <summary>
                空值或空字符值忽略缓存
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.IgnoreNullConfig``1">
            <summary>
                空值或空字符值忽略缓存
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Artemis.Data.Store.Store`3._ignoreIdConfig">
            <summary>
                Id忽略缓存
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.IgnoreIdConfig``1">
            <summary>
                Id忽略访问器
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Artemis.Data.Store.Store`3._ignoreMetaConfig">
            <summary>
                元数据忽略缓存
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.IgnoreMetaConfig``1">
            <summary>
                元数据忽略访问器
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.AddEntity(`0)">
            <summary>
                添加单个实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.AddEntities(System.Collections.Generic.ICollection{`0})">
            <summary>
                添加多个实体
            </summary>
            <param name="entities">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.UpdateEntity(`0)">
            <summary>
                追踪一个实体更新
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.UpdateEntities(System.Collections.Generic.ICollection{`0})">
            <summary>
                追踪多个实体更新
            </summary>
            <param name="entities">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdateEntity(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                批量删除实体
            </summary>
            <param name="query">查询</param>
            <param name="setter">更新委托</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchUpdateEntityAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                批量删除实体
            </summary>
            <param name="query">查询</param>
            <param name="setter">更新委托</param>
            <param name="cancellationToken">异步操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.DeleteEntity(`0)">
            <summary>
                追踪一个实体删除
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.DeleteEntities(System.Collections.Generic.ICollection{`0})">
            <summary>
                追踪多个实体删除
            </summary>
            <param name="entities">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDeleteEntity(System.Linq.IQueryable{`0})">
            <summary>
                批量删除实体
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.BatchDeleteEntityAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
            <summary>
                异步批量删除实体
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindById(`2)">
            <summary>
                根据Id查询实体
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindByIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
                根据Id查询实体
            </summary>
            <param name="ids">id</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindByIdAsync(`2,System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.FindByIdsAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.AttacheChange">
            <summary>
                保存追踪
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`3.AttacheChangeAsync(System.Threading.CancellationToken)">
            <summary>
                保存异步追踪
            </summary>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.StoreBase`2">
            <summary>
                抽象基本存储实现
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="F:Artemis.Data.Store.StoreBase`2._disposed">
            <summary>
                已释放标识
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.#ctor(Artemis.Data.Store.IStoreErrorDescriber)">
            <summary>
                创建一个新的基本存储实例
            </summary>
            <param name="describer"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Artemis.Data.Store.StoreBase`2.ErrorDescriber">
            <summary>
                设置当前发生错误的错误描述者
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.ConvertIdFromString(System.String)">
            <summary>
                转换字符串到id
            </summary>
            <param name="id">id字符串</param>
            <returns>id</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.ConvertIdToString(`1)">
            <summary>
                转换Id为字符串
            </summary>
            <param name="id">id</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.ThrowIfDisposed">
            <summary>
                Throws if this class has been disposed.
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.GetId(`0)">
            <summary>
                获取指定实体Id
            </summary>
            <param name="entity">实体</param>
            <returns>Id</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
                获取指定实体Id
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步操作的信号</param>
            <returns>Id</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.GetIdString(`0)">
            <summary>
                获取指定实体Id字符串
            </summary>
            <param name="entity">实体</param>
            <returns>Id字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.GetIdStringAsync(`0,System.Threading.CancellationToken)">
            <summary>
                获取指定实体Id字符串
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步操作信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.IsDeleted(`0)">
            <summary>
                是否被删除
            </summary>
            <param name="entity">实体</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.IsDeletedAsync(`0,System.Threading.CancellationToken)">
            <summary>
                是否被删除
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.OnActionExecuting``1(``0,System.String)">
            <summary>
                方法执行前
            </summary>
            <param name="value">实体</param>
            <param name="name">参数名</param>
            <exception cref="T:System.ArgumentNullException">空参数异常</exception>
        </member>
        <member name="M:Artemis.Data.Store.StoreBase`2.OnAsyncActionExecuting``1(``0,System.String,System.Threading.CancellationToken)">
            <summary>
                异步方法执行前
            </summary>
            <param name="value">实体</param>
            <param name="name">参数名</param>
            <param name="cancellationToken">取消信号</param>
        </member>
        <member name="T:Artemis.Data.Store.StoreError">
            <summary>
                存储子系统错误封装
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreError.Code">
            <summary>
                错误编码
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreError.Description">
            <summary>
                错误描述
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.StoreErrorDescriber">
            <summary>
                存储异常描述器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.DefaultError">
            <summary>
                生成默认异常
            </summary>
            <returns>默认异常</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.ConcurrencyFailure">
            <summary>
                提示发生并发失败
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.NotFoundId(System.String)">
            <summary>
                提示未找到Id失败
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.EnableCache">
            <summary>
                提示已允许具缓存策略
            </summary>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.StoreOptions">
            <summary>
                存储配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.AutoSaveChanges">
            <summary>
                是否启用自动保存
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.MetaDataHosting">
            <summary>
                是否启用元数据托管
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.SoftDelete">
            <summary>
                是否启用软删除
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.CachedStore">
            <summary>
                是否启用具缓存策略
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.Expires">
            <summary>
                过期时间(秒)
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.DebugLogger">
            <summary>
                是否启用Debug日志
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.StoreResult">
            <summary>
                存储操作结果
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.Succeeded">
            <summary>
                指示操作是否成功的标志
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.EffectRows">
            <summary>
                指示操作受影响行数
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.Errors">
            <summary>
                包含存储过程中产生的所有错误的实例
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.Success(System.Int32)">
            <summary>
                操作成功时返回结果
            </summary>
            <param name="effectRows">收影响行数</param>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.Failed(Artemis.Data.Store.StoreError[])">
            <summary>
                创建一个操作失败的实例
            </summary>
            <param name="errors">错误列表</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.ToString">
            <summary>
                ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.ValueConverter.EnumerationValueConverter`1">
            <summary>
                枚举类型值转换器
            </summary>
            <typeparam name="T">枚举类</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.ValueConverter.EnumerationValueConverter`1.#ctor">
            <summary>
                构造
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.ValueConverter.StringCollectionValueConverter">
            <summary>
                字符串集合值转换器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.ValueConverter.StringCollectionValueConverter.#ctor">
            <summary>
                构造
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.ValueConverter.StringReverseValueConverter">
            <summary>
                字符串反转值转换器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.ValueConverter.StringReverseValueConverter.#ctor">
            <summary>
                构造
            </summary>
        </member>
    </members>
</doc>
