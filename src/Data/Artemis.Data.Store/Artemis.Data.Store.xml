<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Artemis.Data.Store</name>
    </assembly>
    <members>
        <member name="T:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`1">
            <summary>
                元数据模型类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`2">
            <summary>
                元数据模型类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`2.UseConcurrencyStampFieldConfiguration">
            <summary>
                启用并发戳字段配置
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`2.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                并发锁字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`1">
            <summary>
                元数据模型类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`2">
            <summary>
                元数据模型类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`2.UsePartitionConfiguration">
            <summary>
                启用分区配置
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`2.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                分区标识插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`2.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                分区标识插件关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`1">
            <summary>
                元数据模型类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`2">
            <summary>
                元数据模型类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`2.UseConcurrencyStampFieldConfiguration">
            <summary>
                启用并发戳字段配置
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`2.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                并发锁字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`1">
            <summary>
                元数据模型类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2">
            <summary>
                元数据模型类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2.UseHandlerIndexConfiguration">
            <summary>
                启用操作者索引配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2.UseHandlerFieldConfiguration">
            <summary>
                启用操作者字段配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2.UseMateIndexConfiguration">
            <summary>
                启用元数据索引配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2.UseMateFieldConfiguration">
            <summary>
                启用元数据字段配置
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2.MateSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                元数据插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2.MateSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                元数据插件索引配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2.HandlerSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                操作者插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2.HandlerSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                操作者插件关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`1">
            <summary>
                KeySlot类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`2">
            <summary>
                KeySlot类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`2.UseKeyConfiguration">
            <summary>
                启用键配置
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`2.KeySlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                键插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`2.KeySlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                键插件关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.BaseEntityConfiguration`1">
            <summary>
                抽象实体类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`1.KeySlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                键插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`1.KeySlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                键插件关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2">
            <summary>
                抽象实体类型配置
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                Configures the entity of type <typeparamref name="TEntity" />.
            </summary>
            <param name="builder">The builder to be used to configure the entity type.</param>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.DbType">
            <summary>
                数据库类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.DataTypeSet">
            <summary>
                数据类型适配器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.DataSetDescription">
            <summary>
                数据集描述
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.TableName">
            <summary>
                表名
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.SchemaName">
            <summary>
                架构名
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.KeyName">
            <summary>
                生成主键名称
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.IndexName(System.String[])">
            <summary>
                生成索引名称
            </summary>
            <param name="properties">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.ForeignKeyName(System.String,System.String)">
            <summary>
                生成外键名称
            </summary>
            <param name="subTableName"></param>
            <param name="mainTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.TableConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                表配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.FieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.RelationConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                数据库关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.EntityFieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                实体字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.EntityRelationConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                实体关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UseKeyConfiguration">
            <summary>
                启用键配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UsePartitionConfiguration">
            <summary>
                启用分区配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UseCheckStampConfiguration">
            <summary>
                启用校验戳配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UseSecurityStampFieldConfiguration">
            <summary>
                启用安全戳配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UseConcurrencyStampFieldConfiguration">
            <summary>
                启用并发戳字段配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UseMateFieldConfiguration">
            <summary>
                启用元数据字段配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UseMateIndexConfiguration">
            <summary>
                启用元数据索引配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UseHandlerFieldConfiguration">
            <summary>
                启用操作者配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.UseHandlerIndexConfiguration">
            <summary>
                启用操作者配置
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.SecurityStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                加密戳插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.CheckStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                校验戳插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.CheckStampRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                校验戳插件关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                并发锁字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.KeySlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                键插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.KeySlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                键插件关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                分区标识插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                分区标识插件关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.MateSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                元数据插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.MateSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                元数据插件索引配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.HandlerSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                操作者插件字段配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.HandlerSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
                操作者插件关系配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Artemis.Data.Store.Configuration.EntityConvention">
            <summary>
                实体约定
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.EntityConvention.KeyName(System.String)">
            <summary>
                键名称约定
            </summary>
            <param name="dataSetName">数据集名称</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.EntityConvention.IndexName(System.String,System.String[])">
            <summary>
                索引名称约定
            </summary>
            <param name="dataSetName"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Configuration.EntityConvention.ForeignKeyName(System.String,System.String)">
            <summary>
                外键名称约定
            </summary>
            <param name="dataSetName">数据集名称</param>
            <param name="referenceDataSetName">引用数据集名称</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.DataTypeAdapter">
            <summary>
                数据类型适配器
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DataTypeAdapter._dataTypeDictionary">
            <summary>
                数据类型缓存
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeAdapter.DataTypeDictionary">
            <summary>
                数据类型访问器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.DataTypeAdapter.GetDataTypeSet(Artemis.Data.Store.DbType)">
            <summary>
                获取数据类型集
            </summary>
            <param name="dbType">数据库类型</param>
            <returns>数据类型集</returns>
        </member>
        <member name="T:Artemis.Data.Store.DataTypeSet">
            <summary>
                数据类型集
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Guid">
            <summary>
                Guid数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.DateTime">
            <summary>
                DateTime数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Boolean">
            <summary>
                Boolean数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Integer">
            <summary>
                Integer数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Long">
            <summary>
                Long数据类型
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.DataTypeSet.Double">
            <summary>
                Double数据类型
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.DbType">
            <summary>
                数据库类型
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.Unknown">
            <summary>
                Unknown
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.Oracle">
            <summary>
                Oracle
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.SqlServer">
            <summary>
                SqlServer
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.MySql">
            <summary>
                MySql
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.PostgreSql">
            <summary>
                PostgreSql
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.DbType.Sqlite">
            <summary>
                Sqlite
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.DbType.#ctor(System.Int32,System.String)">
            <summary>
                构造函数
            </summary>
            <param name="id">枚举Id</param>
            <param name="name">枚举名称</param>
        </member>
        <member name="T:Artemis.Data.Store.Extensions.ExpressionExtensions">
            <summary>
                表达式扩展
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Extensions.ExpressionExtensions.AppendSetProperty``1(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0}}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0}}})">
            <summary>
                添加setter内容
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.Extensions.Instance">
            <summary>
                实例辅助类
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Extensions.Instance.CreateInstance``1">
            <summary>
                创建实例
            </summary>
            <typeparam name="TEntity">实例类型</typeparam>
            <returns>实例</returns>
            <exception cref="T:Artemis.Data.Core.Exceptions.CreateInstanceException">创建实例异常</exception>
        </member>
        <member name="M:Artemis.Data.Store.Extensions.Instance.CreateInstance``2(``1)">
            <summary>
                创建实例
            </summary>
            <typeparam name="TEntity">实例类型</typeparam>
            <typeparam name="TMapEntity">映射实例类型</typeparam>
            <param name="mapEntity"></param>
            <returns>实例</returns>
            <exception cref="T:Artemis.Data.Core.Exceptions.CreateInstanceException">创建实例异常</exception>
        </member>
        <member name="T:Artemis.Data.Store.Extensions.QueryableExtensions">
            <summary>
                Queryable扩展
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                若条件为真则添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">查询</param>
            <param name="condition">检查条件</param>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Extensions.QueryableExtensions.SetUpDefinition``1(System.Linq.IQueryable{``0},Artemis.Data.Core.QueryDefinition)">
            <summary>
                装载查询定义
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">查询</param>
            <param name="definition">查询定义</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.Formatter">
            <summary>
                格式化资源
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Formatter.FormatNotFoundId(System.String)">
            <summary>
                格式化 未查询到Id为{0}的对象。 的本地化字符串。
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Formatter.FormatEntityNotFound(System.String,System.String)">
            <summary>
                格式化未 查询到类型为{0}的对象。 的本地化字符串
            </summary>
            <param name="entity"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Formatter.FormatEntityHasBeenSet(System.String,System.String)">
            <summary>
                格式化类型为{0}的对象已存在。 的本地化字符串
            </summary>
            <param name="entity"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Formatter.FormatPropertyIsNull(System.String)">
            <summary>
                格式化属性{0}为空。 的本地化字符串
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IStore`1">
            <summary>
                存储接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStore`2">
            <summary>
                存储接口
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IKeyLessStore`1">
            <summary>
                无键存储接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStore`1.GenerateKey(`0)">
            <summary>
                生成键
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IStoreCommon`1">
            <summary>
                通用存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStoreCommon`2">
            <summary>
                通用存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.KeyMatchQuery(`1)">
            <summary>
                键适配查询
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.KeyMatchQuery(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                键适配查询
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.GetId(`0)">
            <summary>
                获取指定实体Id
            </summary>
            <param name="entity">实体</param>
            <returns>Id</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
                获取指定实体Id
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步操作的信号</param>
            <returns>Id</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.GetIdString(`0)">
            <summary>
                获取指定实体Id字符串
            </summary>
            <param name="entity">实体</param>
            <returns>Id字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.GetIdStringAsync(`0,System.Threading.CancellationToken)">
            <summary>
                获取指定实体Id字符串
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步操作信号</param>
            <returns>Id字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.IsDeleted(`0)">
            <summary>
                是否被删除
            </summary>
            <param name="entity">实体</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.IsDeleted(`1)">
            <summary>
                是否被删除
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.IsDeletedAsync(`0,System.Threading.CancellationToken)">
            <summary>
                是否被删除
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.IsDeletedAsync(`1,System.Threading.CancellationToken)">
            <summary>
                是否被删除
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdate(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                更新存储中的实体
            </summary>
            <param name="id">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdate(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="ids">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdateAsync(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="id">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdateAsync(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="ids">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Delete(`1)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Delete(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.DeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.DeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDelete(`1)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDelete(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntity(`1)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntities(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntityAsync(`1,System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntitiesAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.Exists(`1)">
            <summary>
                判断实体是否存在
            </summary>
            <param name="id">实体键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreCommon`2.ExistsAsync(`1,System.Threading.CancellationToken)">
            <summary>
                判断实体是否存在
            </summary>
            <param name="id">实体键</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IKeyLessStoreCommon`1">
            <summary>
                无键模型通用存储接口
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IKeyLessStoreCommon`1.EntitySet">
            <summary>
                Entity集合访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IKeyLessStoreCommon`1.TrackingQuery">
            <summary>
                Entity有追踪访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IKeyLessStoreCommon`1.EntityQuery">
            <summary>
                Entity无追踪访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IKeyLessStoreCommon`1.StoreName">
            <summary>
                存储名称
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Create(`0)">
            <summary>
                在<paramref name="entity" />存储中创建一个新的实体
            </summary>
            <param name="entity">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中创建多个新的实体
            </summary>
            <param name="entities">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中创建一个新的实体
            </summary>
            <param name="entity">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.CreateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中创建多个新的实体
            </summary>
            <param name="entities">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Update(`0)">
            <summary>
                在<paramref name="entity" />存储中更新已存在的实体
            </summary>
            <param name="entity">被更新实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中更新多个已存在的实体
            </summary>
            <param name="entities">被更新实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中更新已存在的实体
            </summary>
            <param name="entity">被更新实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中更新多个已存在的实体
            </summary>
            <param name="entities">被更新实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchUpdate(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                在存储中更新符合条件的实体
            </summary>
            <param name="setter">更新行为</param>
            <param name="predicate">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchUpdate(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                在存储中更新符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchUpdateAsync(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新符合条件的实体
            </summary>
            <param name="setter">更新行为</param>
            <param name="predicate">查询表达式</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchUpdateAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Delete(`0)">
            <summary>
                在<paramref name="entity" />存储中删除已存在的实体
            </summary>
            <param name="entity">被删除实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中删除已存在的实体
            </summary>
            <param name="entities">被删除实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中删除已存在的实体
            </summary>
            <param name="entity">被删除实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中删除已存在的实体
            </summary>
            <param name="entities">被删除实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                在存储中删除符合条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchDelete(System.Linq.IQueryable{`0})">
            <summary>
                在存储中删除符合查询描述的实体
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                在存储中删除符合条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchDeleteAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
            <summary>
                在存储中删除符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IStoreMap`1">
            <summary>
                可映射存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Artemis.Data.Store.IStoreMap`2">
            <summary>
                可映射存储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.FindMapEntity``1(`1)">
            <summary>
                根据id查找映射实体
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.FindMapEntities``1(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                根据id查找映射实体
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="ids">ids</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.FindMapEntityAsync``1(`1,System.Threading.CancellationToken)">
            <summary>
                根据Id查找映射实体
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.FindMapEntitiesAsync``1(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                根据Id查找映射实体
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Over``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Over``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.OverAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.OverAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Merge``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.Merge``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.MergeAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreMap`2.MergeAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IKeyLessStoreMap`1">
            <summary>
                无键可映射存储接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.CreateNew``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.CreateNew``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射创建一组新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.CreateNewAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.CreateNewAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.Over``1(``0,`0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.Over``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.OverAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.OverAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.Merge``1(``0,`0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.MergeAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.MergeAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IManager">
            <summary>
                提供用于管理具存储模型的存储器的API接口
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.Manager">
            <summary>
                提供用于管理具存储模型的存储器的API
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Manager.#ctor(Artemis.Data.Store.IManagerOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                创建新的管理器实例
            </summary>
            <param name="options">配置依赖</param>
            <param name="logger">日志依赖</param>
        </member>
        <member name="M:Artemis.Data.Store.Manager.OnAsyncActionExecuting(System.Threading.CancellationToken)">
            <summary>
                异步函数执行前
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="P:Artemis.Data.Store.Manager.Options">
            <summary>
                具键存储管理器配置接口
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Manager.Logger">
            <summary>
                日志依赖访问器
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.Manager._disposed">
            <summary>
                标记资源是否已被或是否需要释放
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Manager.Dispose">
            <summary>
                Releases all resources used by the user manager.
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Manager.Dispose(System.Boolean)">
            <summary>
                Releases the unmanaged resources used by the role manager and optionally releases the managed resources.
            </summary>
            <param name="disposing">
                true to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:Artemis.Data.Store.Manager.StoreDispose">
            <summary>
                释放托管的Store
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Manager.ThrowIfDisposed">
            <summary>
                Throws if this class has been disposed.
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.IManagerOptions">
            <summary>
                具键存储管理器配置接口
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IManagerOptions.EnableLogger">
            <summary>
                是否启用Debug日志
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.ManagerOptions">
            <summary>
                具键存储管理器配置实例
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.ManagerOptions.EnableLogger">
            <summary>
                是否启用Debug日志
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.ConcurrencyFailure">
            <summary>
              Looks up a localized string similar to 乐观并发失败，对象已被修改。.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.DefaultError">
            <summary>
              Looks up a localized string similar to 发生未知异常。.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.EnableCache">
            <summary>
              Looks up a localized string similar to 当前Store已启用具缓存策略。.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.EntityHasBeenSet">
            <summary>
              Looks up a localized string similar to 对象&apos;{0}&apos;已被设置,Flag:&apos;{1}&apos;。.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.EntityNotFound">
            <summary>
              Looks up a localized string similar to 未找到匹配的&apos;{0}&apos;对象,Flag:&apos;{1}&apos;。.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.NotFoundId">
            <summary>
              Looks up a localized string similar to 未查询到Id为 &apos;{0}&apos; 的对象。.
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.Resources.PropertyIsNull">
            <summary>
              Looks up a localized string similar to 必要参数&apos;{0}&apos;的值为空。.
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.ISeparateManager`3">
            <summary>
            独立模型管理接口
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TEntityInfo"></typeparam>
            <typeparam name="TEntityPackage"></typeparam>
        </member>
        <member name="T:Artemis.Data.Store.ISeparateManager`4">
            <summary>
                独立模型接口
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.ISeparateManager`4.ReadEntityInfoAsync(`1,System.Threading.CancellationToken)">
            <summary>
                读取实体信息
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ISeparateManager`4.CreateEntityAsync(`3,System.Threading.CancellationToken)">
            <summary>
                创建实体
            </summary>
            <param name="package"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ISeparateManager`4.CreateEntitiesAsync(System.Collections.Generic.IEnumerable{`3},System.Threading.CancellationToken)">
            <summary>
                批量创建实体
            </summary>
            <param name="packages"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ISeparateManager`4.UpdateEntityAsync(`1,`3,System.Threading.CancellationToken)">
            <summary>
                更新实体
            </summary>
            <param name="key"></param>
            <param name="package"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ISeparateManager`4.UpdateEntitiesAsync(System.Collections.Generic.IDictionary{`1,`3},System.Threading.CancellationToken)">
            <summary>
                批量更新实体
            </summary>
            <param name="dictionary"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ISeparateManager`4.DeleteEntityAsync(`1,System.Threading.CancellationToken)">
            <summary>
                删除实体
            </summary>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ISeparateManager`4.DeleteEntitiesAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                批量删除实体
            </summary>
            <param name="keys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.SeparateManager`3">
            <summary>
            单独模型管理器
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TEntityInfo"></typeparam>
            <typeparam name="TEntityPackage"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`3.#ctor(Artemis.Data.Store.IStore{`0,System.Guid})">
            <summary>
            独立模型管理器构造
            </summary>
            <param name="entityStore"></param>
        </member>
        <member name="T:Artemis.Data.Store.SeparateManager`4">
            <summary>
                单独模型
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.#ctor(Artemis.Data.Store.IStore{`0,`1})">
            <summary>
                独立模型管理器构造
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.SeparateManager`4.EntityStore">
            <summary>
                单独实体存储
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.StoreDispose">
            <summary>
                释放托管的Store
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.ReadEntityInfoAsync(`1,System.Threading.CancellationToken)">
            <summary>
                读取实体信息
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.CreateEntityAsync(`3,System.Threading.CancellationToken)">
            <summary>
                创建实体
            </summary>
            <param name="package"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.CreateEntitiesAsync(System.Collections.Generic.IEnumerable{`3},System.Threading.CancellationToken)">
            <summary>
                批量创建实体
            </summary>
            <param name="packages"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.UpdateEntityAsync(`1,`3,System.Threading.CancellationToken)">
            <summary>
                更新实体
            </summary>
            <param name="key"></param>
            <param name="package"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.UpdateEntitiesAsync(System.Collections.Generic.IDictionary{`1,`3},System.Threading.CancellationToken)">
            <summary>
                批量更新实体
            </summary>
            <param name="dictionary"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.DeleteEntityAsync(`1,System.Threading.CancellationToken)">
            <summary>
                删除实体
            </summary>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.DeleteEntitiesAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                批量删除实体
            </summary>
            <param name="keys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.MapNewEntity(`3)">
            <summary>
                映射到新实体
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.SeparateManager`4.MapOverEntity(`0,`3)">
            <summary>
                覆盖实体
            </summary>
            <param name="entity"></param>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.Store`1">
            <summary>
                存储实现
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Store`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,Artemis.Data.Store.IStoreOptions,Artemis.Data.Core.IHandlerProxy,Artemis.Data.Core.ICacheProxy,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.StoreErrorDescriber)">
            <summary>
                基本存储实例构造
            </summary>
            <param name="context"></param>
            <param name="storeOptions"></param>
            <param name="handlerProxy"></param>
            <param name="cacheProxy"></param>
            <param name="logger"></param>
            <param name="describer"></param>
        </member>
        <member name="P:Artemis.Data.Store.Store`1.EntityKey">
            <summary>
                实体键生成委托
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`1.ConvertIdFromString(System.String)">
            <summary>
                转换字符串到id
            </summary>
            <param name="id">id字符串</param>
            <returns>id</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`1.ConvertIdToString(System.Guid)">
            <summary>
                转换Id为字符串
            </summary>
            <param name="id">id</param>
            <returns>字符串</returns>
        </member>
        <member name="T:Artemis.Data.Store.Store`2">
            <summary>
                存储实现
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.#ctor(Microsoft.EntityFrameworkCore.DbContext,Artemis.Data.Store.IStoreOptions,Artemis.Data.Core.IHandlerProxy,Artemis.Data.Core.ICacheProxy,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.StoreErrorDescriber)">
            <summary>
                基本存储实例构造
            </summary>
            <param name="context"></param>
            <param name="storeOptions"></param>
            <param name="handlerProxy"></param>
            <param name="cacheProxy"></param>
            <param name="logger"></param>
            <param name="describer"></param>
            <exception cref="T:Artemis.Data.Core.Exceptions.StoreParameterNullException"></exception>
        </member>
        <member name="P:Artemis.Data.Store.Store`2.EntityKey">
            <summary>
                实体键生成委托
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.ConvertToEntityKey(`1)">
            <summary>
                生成键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.KeyMatchQuery(`1)">
            <summary>
                键适配查询
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.KeyMatchQuery(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                键适配查询
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.ConvertIdFromString(System.String)">
            <summary>
                转换字符串到id
            </summary>
            <param name="id">id字符串</param>
            <returns>id</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.ConvertIdToString(`1)">
            <summary>
                转换Id为字符串
            </summary>
            <param name="id">id</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.GetId(`0)">
            <summary>
                获取指定实体Id
            </summary>
            <param name="entity">实体</param>
            <returns>Id</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
                获取指定实体Id
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步操作的信号</param>
            <returns>Id</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.GetIdString(`0)">
            <summary>
                获取指定实体Id字符串
            </summary>
            <param name="entity">实体</param>
            <returns>Id字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.GetIdStringAsync(`0,System.Threading.CancellationToken)">
            <summary>
                获取指定实体Id字符串
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消异步操作信号</param>
            <returns>Id字符串</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.IsDeleted(`0)">
            <summary>
                是否被删除
            </summary>
            <param name="entity">实体</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.IsDeleted(`1)">
            <summary>
                是否被删除
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.IsDeletedAsync(`0,System.Threading.CancellationToken)">
            <summary>
                是否被删除
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.IsDeletedAsync(`1,System.Threading.CancellationToken)">
            <summary>
                是否被删除
            </summary>
            <param name="key">键</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.BatchUpdate(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                更新存储中的实体
            </summary>
            <param name="id">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.BatchUpdate(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="ids">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.BatchUpdateAsync(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="id">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.BatchUpdateAsync(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新已存在的实体
            </summary>
            <param name="ids">被更新实体的主键</param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.Delete(`1)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.Delete(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.DeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.DeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.BatchDelete(`1)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.BatchDelete(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.BatchDeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="id">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.BatchDeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                在存储中删除已存在的实体
            </summary>
            <param name="ids">被删除实体的主键</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindEntity(`1)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindEntities(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindEntityAsync(`1,System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindEntitiesAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.Exists(`1)">
            <summary>
                判断实体是否存在
            </summary>
            <param name="id">实体键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.ExistsAsync(`1,System.Threading.CancellationToken)">
            <summary>
                判断实体是否存在
            </summary>
            <param name="id">实体键</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindMapEntity``1(`1)">
            <summary>
                根据id查找映射实体
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindMapEntities``1(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                根据id查找映射实体
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="ids">ids</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindMapEntityAsync``1(`1,System.Threading.CancellationToken)">
            <summary>
                根据Id查找映射实体
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindMapEntitiesAsync``1(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                根据Id查找映射实体
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.Over``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.Over``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.OverAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.OverAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.Merge``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.Merge``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.MergeAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.MergeAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应Id的实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindById(`1)">
            <summary>
                根据Id查询实体
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindById``1(`1)">
            <summary>
                根据Id查询实体并映射到指定类型
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindByIds(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                根据Id查询实体
            </summary>
            <param name="ids">id表</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindByIds``1(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                根据Id查询实体并映射到指定类型
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="ids">id表</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindByIdAsync(`1,System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindByIdAsync``1(`1,System.Threading.CancellationToken)">
            <summary>
                根据Id查询实体并映射到指定类型
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="id"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindByIdsAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                根据Id查找实体
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.Store`2.FindByIdsAsync``1(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
                根据Id查询实体并映射到指定类型
            </summary>
            <typeparam name="TMapEntity">映射类型</typeparam>
            <param name="ids"></param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.KeyLessStore`1">
            <summary>
                无键数据模型存储
            </summary>
            <typeparam name="TEntity">模型类型</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,Artemis.Data.Store.IStoreOptions,Artemis.Data.Core.IHandlerProxy,Artemis.Data.Core.ICacheProxy,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.StoreErrorDescriber)">
            <summary>
                无键模型基本存储实例构造
            </summary>
            <param name="context"></param>
            <param name="storeOptions"></param>
            <param name="handlerProxy"></param>
            <param name="cacheProxy"></param>
            <param name="logger"></param>
            <param name="describer"></param>
            <exception cref="T:Artemis.Data.Core.Exceptions.StoreParameterNullException"></exception>
        </member>
        <member name="F:Artemis.Data.Store.KeyLessStore`1._disposed">
            <summary>
                已释放标识
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.ThrowIfDisposed">
            <summary>
                Throws if this class has been disposed.
            </summary>
            <exception cref="T:Artemis.Data.Core.Exceptions.StoreDisposedException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.GenerateKey(`0)">
            <summary>
                生成键
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.Context">
            <summary>
                数据访问上下文
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.Logger">
            <summary>
                日志依赖
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.StoreOptions">
            <summary>
                存储配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.HandlerProxy">
            <summary>
                操作人代理
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.CacheProxy">
            <summary>
                缓存代理
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.Describer">
            <summary>
                设置当前发生错误的错误描述者
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.EntitySet">
            <summary>
                Entity集合访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.TrackingQuery">
            <summary>
                Entity有追踪访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.EntityQuery">
            <summary>
                Entity无追踪访问器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.StoreName">
            <summary>
                存储名称
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.EntityKey">
            <summary>
                实体键生成委托
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.DebugLogger">
            <summary>
                是否启用Debug日志
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.AutoSaveChanges">
            <summary>
                设置是否自动保存更改
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.MetaDataHosting">
            <summary>
                元数据托管标识
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.SoftDelete">
            <summary>
                软删除标识
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.HandlerHosting">
            <summary>
                操作员托管标识
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.CachedStore">
            <summary>
                是否启用缓存
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.KeyLessStore`1.Expires">
            <summary>
                缓存过期时间
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Create(`0)">
            <summary>
                在<paramref name="entity" />存储中创建一个新的实体
            </summary>
            <param name="entity">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中创建多个新的实体
            </summary>
            <param name="entities">被创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中创建一个新的实体
            </summary>
            <param name="entity">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CreateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中创建多个新的实体
            </summary>
            <param name="entities">被创建实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Update(`0)">
            <summary>
                在<paramref name="entity" />存储中更新已存在的实体
            </summary>
            <param name="entity">被更新实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中更新多个已存在的实体
            </summary>
            <param name="entities">被更新实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中更新已存在的实体
            </summary>
            <param name="entity">被更新实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中更新多个已存在的实体
            </summary>
            <param name="entities">被更新实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchUpdate(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                在存储中更新符合条件的实体
            </summary>
            <param name="setter">更新行为</param>
            <param name="predicate">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchUpdate(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                在存储中更新符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="setter">更新行为</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchUpdateAsync(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新符合条件的实体
            </summary>
            <param name="setter">更新行为</param>
            <param name="predicate">查询表达式</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchUpdateAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                在存储中更新符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="setter">更新行为</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Delete(`0)">
            <summary>
                在<paramref name="entity" />存储中删除已存在的实体
            </summary>
            <param name="entity">被删除实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                在<paramref name="entities" />存储中删除已存在的实体
            </summary>
            <param name="entities">被删除实体</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entity" />存储中删除已存在的实体
            </summary>
            <param name="entity">被删除实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                在<paramref name="entities" />存储中删除已存在的实体
            </summary>
            <param name="entities">被删除实体</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                在存储中删除符合条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchDelete(System.Linq.IQueryable{`0})">
            <summary>
                在存储中删除符合查询描述的实体
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                在存储中删除符合条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <param name="cancellationToken">操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchDeleteAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
            <summary>
                在存储中删除符合查询描述的实体
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="F:Artemis.Data.Store.KeyLessStore`1._createNewConfig">
            <summary>
                创建新对象的映射配置缓存
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CreateNewConfig``1">
            <summary>
                创建新对象的映射配置
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Artemis.Data.Store.KeyLessStore`1._overCertaintyConfig">
            <summary>
                覆盖对象的映射配置缓存(对象明确)
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.KeyLessStore`1._overDeCertaintyConfig">
            <summary>
                覆盖对象的映射配置缓存(对象不明确)
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.OverConfig``1(System.Boolean)">
            <summary>
                覆盖对象的映射配置
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="certainty">对象是否明确</param>
            <returns></returns>
        </member>
        <member name="F:Artemis.Data.Store.KeyLessStore`1._mergeCertaintyConfig">
            <summary>
                合并对象的映射配置缓存(对象明确)
            </summary>
        </member>
        <member name="F:Artemis.Data.Store.KeyLessStore`1._mergeDeCertaintyConfig">
            <summary>
                合并对象的映射配置缓存(对象不明确)
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.MergeConfig``1(System.Boolean)">
            <summary>
                合并对象的映射配置
            </summary>
            <param name="certainty"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CreateNew``1(``0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CreateNew``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射创建一组新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CreateNewAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CreateNewAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射创建一个新实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="sources">源数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Over``1(``0,`0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Over``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.OverAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.OverAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射覆盖对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Merge``1(``0,`0,Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.MergeAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">源数据</param>
            <param name="destination">目标数据</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.MergeAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
            <summary>
                通过类型映射合并对应实体
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TJKey">连接键类型</typeparam>
            <param name="sources">源数据</param>
            <param name="destinations">目标数据</param>
            <param name="destinationKeySelector">目标键选择器</param>
            <param name="config">映射配置</param>
            <param name="cancellationToken">取消信号</param>
            <param name="sourceKeySelector">源键选择器</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CacheKey(`0)">
            <summary>
                生成键
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CacheKey(System.String)">
            <summary>
                生成键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CacheEntity(`0)">
            <summary>
                缓存实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CacheEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
                缓存实体
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CacheEntities(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                缓存实体
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.CacheEntitiesAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                缓存实体
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.GetEntity(System.String)">
            <summary>
                获取实体
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.GetEntityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                获取实体
            </summary>
            <param name="key">缓存键</param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.GetEntities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                获取实体
            </summary>
            <param name="keys">实体键列表</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.GetEntitiesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                获取实体
            </summary>
            <param name="keys">实体键列表</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.RemoveCachedEntity(System.String)">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="key"></param>
            <exception cref="T:Artemis.Data.Core.Exceptions.InstanceNotImplementException"></exception>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.RemoveCachedEntity(`0)">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.RemoveCachedEntityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="key"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.RemoveCachedEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.RemoveCachedEntities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.RemoveCachedEntities(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.RemoveCachedEntitiesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="keys"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.RemoveCachedEntitiesAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                移除被缓存的实体
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.AddEntity(`0)">
            <summary>
                添加单个实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.AddEntities(System.Collections.Generic.ICollection{`0})">
            <summary>
                添加多个实体
            </summary>
            <param name="entities">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.UpdateEntity(`0)">
            <summary>
                追踪一个实体更新
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.UpdateEntities(System.Collections.Generic.ICollection{`0})">
            <summary>
                追踪多个实体更新
            </summary>
            <param name="entities">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchUpdateEntity(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
            <summary>
                批量更新实体
            </summary>
            <param name="query">查询</param>
            <param name="setter">更新委托</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchUpdateEntityAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
                批量删除实体
            </summary>
            <param name="query">查询</param>
            <param name="setter">更新委托</param>
            <param name="cancellationToken">异步操作取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.DeleteEntity(`0)">
            <summary>
                追踪一个实体删除
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.DeleteEntities(System.Collections.Generic.ICollection{`0})">
            <summary>
                追踪多个实体删除
            </summary>
            <param name="entities">实体</param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchDeleteEntity(System.Linq.IQueryable{`0})">
            <summary>
                批量删除实体
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.BatchDeleteEntityAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
            <summary>
                异步批量删除实体
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.OnActionExecuting``1(``0,System.String)">
            <summary>
                方法执行前
            </summary>
            <param name="value">实体</param>
            <param name="name">参数名</param>
            <exception cref="T:Artemis.Data.Core.Exceptions.StoreParameterNullException">空参数异常</exception>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.OnAsyncActionExecuting``1(``0,System.String,System.Threading.CancellationToken)">
            <summary>
                异步方法执行前
            </summary>
            <param name="value">实体</param>
            <param name="name">参数名</param>
            <param name="cancellationToken">取消信号</param>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.AttacheChange">
            <summary>
                保存追踪
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.AttacheChangeAsync(System.Threading.CancellationToken)">
            <summary>
                保存异步追踪
            </summary>
            <param name="cancellationToken">取消信号</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.SaveChanges">
            <summary>
                保存当前存储
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.KeyLessStore`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
                保存当前存储
            </summary>
            <param name="cancellationToken">操作取消信号</param>
            <returns>异步取消结果</returns>
        </member>
        <member name="T:Artemis.Data.Store.IStoreErrorDescriber">
            <summary>
                存储异常描述接口
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.DefaultError">
            <summary>
                生成默认异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.ConcurrencyFailure">
            <summary>
                提示并发失败异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.NotFoundId(System.String)">
            <summary>
                提示未找到Id失败
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.EnableCache">
            <summary>
                提示已允许具缓存策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.EntityNotFound(System.String,System.String)">
            <summary>
                实体未找到
            </summary>
            <param name="entity"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.IStoreErrorDescriber.EntityHasBeenSet(System.String,System.String)">
            <summary>
                实体已存在
            </summary>
            <param name="entity"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.StoreErrorDescriber">
            <summary>
                存储异常描述器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.DefaultError">
            <summary>
                生成默认异常
            </summary>
            <returns>默认异常</returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.ConcurrencyFailure">
            <summary>
                提示发生并发失败
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.NotFoundId(System.String)">
            <summary>
                提示未找到Id失败
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.EnableCache">
            <summary>
                提示已允许具缓存策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.EntityNotFound(System.String,System.String)">
            <summary>
                实体未找到
            </summary>
            <param name="entity"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.EntityHasBeenSet(System.String,System.String)">
            <summary>
                实体已存在
            </summary>
            <param name="entity"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreErrorDescriber.PropertyIsNull(System.String)">
            <summary>
                属性为空
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.IStoreOptions">
            <summary>
                无键存储配置接口
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.AutoSaveChanges">
            <summary>
                是否启用自动保存
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.DebugLogger">
            <summary>
                是否启用Debug日志
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.MetaDataHosting">
            <summary>
                是否启用元数据托管
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.SoftDelete">
            <summary>
                是否启用软删除
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.HandlerHosting">
            <summary>
                是否启用操作员托管
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.CachedStore">
            <summary>
                是否启用具缓存策略
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.IStoreOptions.Expires">
            <summary>
                过期时间(秒)
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.StoreOptions">
            <summary>
                无键存储配置
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.AutoSaveChanges">
            <summary>
                是否启用自动保存
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.DebugLogger">
            <summary>
                是否启用Debug日志
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.MetaDataHosting">
            <summary>
                是否启用元数据托管
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.SoftDelete">
            <summary>
                是否启用软删除
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.HandlerHosting">
            <summary>
                是否启用操作员托管
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.CachedStore">
            <summary>
                是否启用具缓存存储策略
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreOptions.Expires">
            <summary>
                过期时间(秒)
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.StoreResult">
            <summary>
                存储操作结果
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.Succeeded">
            <summary>
                指示操作是否成功的标志
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.AffectRows">
            <summary>
                指示操作受影响行数
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.Errors">
            <summary>
                包含存储过程中产生的所有错误的实例
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.DescribeError">
            <summary>
                描述错误
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.Describer">
            <summary>
                描述器
            </summary>
        </member>
        <member name="P:Artemis.Data.Store.StoreResult.DescribeCode">
            <summary>
                描述错误代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.Success(System.Int32)">
            <summary>
                操作成功时返回结果
            </summary>
            <param name="effectRows">收影响行数</param>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.Failed(Artemis.Data.Core.StoreError[])">
            <summary>
                创建一个操作失败的实例
            </summary>
            <param name="errors">错误列表</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.EntityFoundFailed(System.String,System.String)">
            <summary>
                实体已存在失败
            </summary>
            <param name="name">实体名</param>
            <param name="flag">判断标识</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.EntityNotFoundFailed(System.String,System.String)">
            <summary>
                实体不存在失败
            </summary>
            <param name="name">实体名</param>
            <param name="flag">判断标识</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.PropertyIsNullFailed(System.String)">
            <summary>
                属性为空失败
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.StoreResult.ToString">
            <summary>
                ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.ITreeManager`6">
            <summary>
            树管理器
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TEntityInfo"></typeparam>
            <typeparam name="TEntityInfoTree"></typeparam>
            <typeparam name="TEntityPackage"></typeparam>
            <typeparam name="TParentKey"></typeparam>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.GetEntityInfoTreeAsync(`1,System.Threading.CancellationToken)">
            <summary>
            获取实体信息树
            </summary>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.CreateParentEntityAsync(`1,`5,System.Threading.CancellationToken)">
            <summary>
            创建父实体
            </summary>
            <param name="key"></param>
            <param name="package"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.CreateChildEntityAsync(`1,`5,System.Threading.CancellationToken)">
            <summary>
            创建子实体
            </summary>
            <param name="key"></param>
            <param name="package"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.BatchCreateChildEntityAsync(`1,System.Collections.Generic.IEnumerable{`5},System.Threading.CancellationToken)">
            <summary>
            批量创建子实体
            </summary>
            <param name="key"></param>
            <param name="packages"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.AddParentEntityAsync(`1,`1,System.Threading.CancellationToken)">
            <summary>
            添加父实体
            </summary>
            <param name="key"></param>
            <param name="parentKey"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.AddChildEntityAsync(`1,`1,System.Threading.CancellationToken)">
            <summary>
            添加子实体
            </summary>
            <param name="key"></param>
            <param name="childKey"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.BatchAddChildEntityAsync(`1,System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            批量添加子实体
            </summary>
            <param name="key"></param>
            <param name="childrenKeys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.DeleteChildEntityAsync(`1,`1,System.Threading.CancellationToken)">
            <summary>
            删除子实体
            </summary>
            <param name="key"></param>
            <param name="childKey"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.BatchDeleteChildEntityAsync(`1,System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            批量删除子实体
            </summary>
            <param name="key"></param>
            <param name="childrenKeys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.RemoveChildEntityAsync(`1,`1,System.Threading.CancellationToken)">
            <summary>
            移除子实体
            </summary>
            <param name="key"></param>
            <param name="childKey"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.ITreeManager`6.BatchRemoveChildEntityAsync(`1,System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            批量移除子实体
            </summary>
            <param name="key"></param>
            <param name="childrenKeys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.TreeManager`6">
            <summary>
            树管理器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.#ctor(Artemis.Data.Store.IStore{`0,`1})">
            <summary>
                树模型管理器构造
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.GetEntityInfoTreeAsync(`1,System.Threading.CancellationToken)">
            <summary>
            获取实体信息树
            </summary>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.CreateParentEntityAsync(`1,`5,System.Threading.CancellationToken)">
            <summary>
            创建父实体
            </summary>
            <param name="key"></param>
            <param name="package"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.CreateChildEntityAsync(`1,`5,System.Threading.CancellationToken)">
            <summary>
            创建子实体
            </summary>
            <param name="key"></param>
            <param name="package"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.BatchCreateChildEntityAsync(`1,System.Collections.Generic.IEnumerable{`5},System.Threading.CancellationToken)">
            <summary>
            批量创建子实体
            </summary>
            <param name="key"></param>
            <param name="packages"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.AddParentEntityAsync(`1,`1,System.Threading.CancellationToken)">
            <summary>
            添加父实体
            </summary>
            <param name="key"></param>
            <param name="parentKey"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.AddChildEntityAsync(`1,`1,System.Threading.CancellationToken)">
            <summary>
            添加子实体
            </summary>
            <param name="key"></param>
            <param name="childKey"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.BatchAddChildEntityAsync(`1,System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            批量添加子实体
            </summary>
            <param name="key"></param>
            <param name="childrenKeys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.DeleteChildEntityAsync(`1,`1,System.Threading.CancellationToken)">
            <summary>
            删除子实体
            </summary>
            <param name="key"></param>
            <param name="childKey"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.BatchDeleteChildEntityAsync(`1,System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            批量删除子实体
            </summary>
            <param name="key"></param>
            <param name="childrenKeys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.RemoveChildEntityAsync(`1,`1,System.Threading.CancellationToken)">
            <summary>
            移除子实体
            </summary>
            <param name="key"></param>
            <param name="childKey"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.BatchRemoveChildEntityAsync(`1,System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            批量移除子实体
            </summary>
            <param name="key"></param>
            <param name="childrenKeys"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.MapToKey(`2)">
            <summary>
            映射到键
            </summary>
            <param name="parentKey">父级键</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.Data.Store.TreeManager`6.MapToParentKey(`1)">
            <summary>
            映射到父级键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.Data.Store.ValueConverter.EnumerationValueConverter`1">
            <summary>
                枚举类型值转换器
            </summary>
            <typeparam name="T">枚举类</typeparam>
        </member>
        <member name="M:Artemis.Data.Store.ValueConverter.EnumerationValueConverter`1.#ctor">
            <summary>
                构造
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.ValueConverter.StringCollectionValueConverter">
            <summary>
                字符串集合值转换器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.ValueConverter.StringCollectionValueConverter.#ctor">
            <summary>
                构造
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.ValueConverter.StringNormalizeValueConverter">
            <summary>
                字符串规范化值转换器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.ValueConverter.StringNormalizeValueConverter.#ctor">
            <summary>
                构造
            </summary>
        </member>
        <member name="T:Artemis.Data.Store.ValueConverter.StringReverseValueConverter">
            <summary>
                字符串反转值转换器
            </summary>
        </member>
        <member name="M:Artemis.Data.Store.ValueConverter.StringReverseValueConverter.#ctor">
            <summary>
                构造
            </summary>
        </member>
    </members>
</doc>
