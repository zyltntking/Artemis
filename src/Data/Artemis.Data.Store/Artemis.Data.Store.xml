<?xml version="1.0"?>

<doc>
	<assembly>
		<name>Artemis.Data.Store</name>
	</assembly>
	<members>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`1">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`2">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`3">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`4">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`5">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
			<typeparam name="TPartition"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.ConcurrencyPartitionEntityConfiguration`5.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				并发锁字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`1">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`2">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`3">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`3.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				并发锁字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`4">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`5">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
			<typeparam name="TPartition"></typeparam>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`5.UsePartitionConfiguration">
			<summary>
				启用分区配置
			</summary>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`5.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.PartitionBaseEntityConfiguration`5.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`1">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`2">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`3">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`4">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`4.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`4.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`5">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
			<typeparam name="TPartition"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.ConcurrencyModelEntityConfiguration`5.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				并发锁字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`1">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`2">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`3">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`3.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				并发锁字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`4">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`4.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`4.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`5">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
			<typeparam name="TPartition"></typeparam>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`5.UseHandlerFieldConfiguration">
			<summary>
				是否启用操作者配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`5.UseHandlerIndexConfiguration">
			<summary>
				启用元数据索引配置
			</summary>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`5.HandlerSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseModelEntityConfiguration`5.HandlerSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`1">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`2">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`2.HandlerSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`2.HandlerSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`3">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`3.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				并发锁字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`4">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`4.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`4.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`5">
			<summary>
				元数据模型类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
			<typeparam name="TPartition"></typeparam>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`5.UseMateFieldConfiguration">
			<summary>
				启用元数据字段配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.MateModelEntityConfiguration`5.UseMateIndexConfiguration">
			<summary>
				启用元数据索引配置
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`1">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`2">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`2.HandlerSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`2.HandlerSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`3">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`3.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				并发锁字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`4">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`4.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`4.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`5">
			<summary>
				KeySlot类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
			<typeparam name="TPartition"></typeparam>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`5.UseKeyConfiguration">
			<summary>
				启用键配置
			</summary>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`5.KeySlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				键插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.KeySlotEntityConfiguration`5.KeySlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				键插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseEntityConfiguration`1">
			<summary>
				抽象实体类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`1.KeySlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				键插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`1.KeySlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				键插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2">
			<summary>
				抽象实体类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.HandlerSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`2.HandlerSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseEntityConfiguration`3">
			<summary>
				抽象实体类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`3.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				并发锁字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseEntityConfiguration`4">
			<summary>
				抽象实体类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`4.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`4.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5">
			<summary>
				抽象实体类型配置
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
			<typeparam name="TConcurrencyStamp"></typeparam>
			<typeparam name="TPartition"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				Configures the entity of type <typeparamref name="TEntity" />.
			</summary>
			<param name="builder">The builder to be used to configure the entity type.</param>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.DbType">
			<summary>
				数据库类型
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.DataTypeSet">
			<summary>
				数据类型集合访问器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.DataSetDescription">
			<summary>
				数据集描述
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.TableName">
			<summary>
				表名
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.SchemaName">
			<summary>
				架构名
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.KeyName">
			<summary>
				生成主键名称
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.IndexName(System.String[])">
			<summary>
				生成索引名称
			</summary>
			<param name="properties">字段名称</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.ForeignKeyName(System.String,System.String)">
			<summary>
				生成外键名称
			</summary>
			<param name="subTableName"></param>
			<param name="mainTableName"></param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.TableConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				表配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.FieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				数据库字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.RelationConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				数据库关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.EntityFieldConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				实体字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.EntityRelationConfigure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				实体关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.UseKeyConfiguration">
			<summary>
				启用键配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.UsePartitionConfiguration">
			<summary>
				启用分区配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.UseMateFieldConfiguration">
			<summary>
				是否启用元数据字段配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.UseMateIndexConfiguration">
			<summary>
				是否启用元数据索引配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.UseHandlerFieldConfiguration">
			<summary>
				是否启用操作者配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.UseHandlerIndexConfiguration">
			<summary>
				是否启用操作者配置
			</summary>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.ConcurrencyStampFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				并发锁字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.KeySlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				键插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.KeySlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				键插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.PartitionSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.PartitionSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				分区标识插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.MateSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				元数据插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.MateSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				元数据插件索引配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.HandlerSlotFieldConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件字段配置
			</summary>
			<param name="builder"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.Configuration.BaseEntityConfiguration`5.HandlerSlotRelationConfiguration(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
			<summary>
				操作者插件关系配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Artemis.Data.Store.Configuration.EntityConvention">
			<summary>
				实体约定
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Configuration.EntityConvention.KeyName(System.String)">
			<summary>
				键名称约定
			</summary>
			<param name="dataSetName">数据集名称</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Configuration.EntityConvention.IndexName(System.String,System.String[])">
			<summary>
				索引名称约定
			</summary>
			<param name="dataSetName"></param>
			<param name="columnNames"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Configuration.EntityConvention.ForeignKeyName(System.String,System.String)">
			<summary>
				外键名称约定
			</summary>
			<param name="dataSetName">数据集名称</param>
			<param name="referenceDataSetName">引用数据集名称</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.DataTypeAdapter">
			<summary>
				数据类型适配器
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.DataTypeAdapter._dataTypeDictionary">
			<summary>
				数据类型缓存
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.DataTypeAdapter.DataTypeDictionary">
			<summary>
				数据类型访问器
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.DataTypeAdapter.GetDataTypeSet(Artemis.Data.Store.DbType)">
			<summary>
				获取数据类型集
			</summary>
			<param name="dbType">数据库类型</param>
			<returns>数据类型集</returns>
		</member>
		<member name="T:Artemis.Data.Store.DataTypeSet">
			<summary>
				数据类型集
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.DataTypeSet.Guid">
			<summary>
				Guid数据类型
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.DataTypeSet.DateTime">
			<summary>
				DateTime数据类型
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.DataTypeSet.Boolean">
			<summary>
				Boolean数据类型
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.DataTypeSet.Integer">
			<summary>
				Integer数据类型
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.DataTypeSet.Long">
			<summary>
				Long数据类型
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.DataTypeSet.Double">
			<summary>
				Double数据类型
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.DbType">
			<summary>
				数据库类型
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.DbType.Unknown">
			<summary>
				Unknown
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.DbType.Oracle">
			<summary>
				Oracle
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.DbType.SqlServer">
			<summary>
				SqlServer
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.DbType.MySql">
			<summary>
				MySql
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.DbType.PostgreSql">
			<summary>
				PostgreSql
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.DbType.Sqlite">
			<summary>
				Sqlite
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.DbType.#ctor(System.Int32,System.String)">
			<summary>
				构造函数
			</summary>
			<param name="id">枚举Id</param>
			<param name="name">枚举名称</param>
		</member>
		<member name="T:Artemis.Data.Store.Extensions.AttachResultExtensions">
			<summary>
				结果附加扩展
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Extensions.AttachResultExtensions.Attach``1(Artemis.Data.Store.StoreResult,``0)">
			<summary>
				附加
			</summary>
			<typeparam name="TAttach">附加数据类型</typeparam>
			<param name="result">结果</param>
			<param name="attach">附加数据</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.Extensions.DistributedCacheExtensions">
			<summary>
				分布式缓存扩展
			</summary>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.DistributedCacheExtensions.Set``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,System.Int32)">
			<summary>
				设置缓存
			</summary>
			<typeparam name="T">存储类型</typeparam>
			<param name="cache">缓存依赖</param>
			<param name="key">缓存键</param>
			<param name="entity">实体</param>
			<param name="expire">过期时间</param>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.DistributedCacheExtensions.SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,System.Int32,System.Threading.CancellationToken)">
			<summary>
				设置缓存
			</summary>
			<typeparam name="T">存储类型</typeparam>
			<param name="cache">缓存依赖</param>
			<param name="key">缓存键</param>
			<param name="entity">缓存实体</param>
			<param name="expire">过期时间</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.DistributedCacheExtensions.Get``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)">
			<summary>
				获取缓存
			</summary>
			<typeparam name="T">存储类型</typeparam>
			<param name="cache">缓存依赖</param>
			<param name="key">缓存键</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.DistributedCacheExtensions.GetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Threading.CancellationToken)">
			<summary>
				获取缓存
			</summary>
			<typeparam name="T">存储类型</typeparam>
			<param name="cache">缓存依赖</param>
			<param name="key">缓存键</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.Extensions.ExpressionExtensions">
			<summary>
				表达式扩展
			</summary>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.ExpressionExtensions.AppendSetProperty``1(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0}}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0}}})">
			<summary>
				添加setter内容
			</summary>
			<typeparam name="TEntity"></typeparam>
			<param name="lhr"></param>
			<param name="rhr"></param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.Extensions.Instance">
			<summary>
				实例辅助类
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Extensions.Instance.CreateInstance``1">
			<summary>
				创建实例
			</summary>
			<typeparam name="TEntity">实例类型</typeparam>
			<returns>实例</returns>
			<exception cref="T:Artemis.Data.Core.Exceptions.CreateInstanceException">创建实例异常</exception>
		</member>
		<member name="M:Artemis.Data.Store.Extensions.Instance.CreateInstance``2(``1)">
			<summary>
				创建实例
			</summary>
			<typeparam name="TEntity">实例类型</typeparam>
			<typeparam name="TMapEntity">映射实例类型</typeparam>
			<param name="mapEntity"></param>
			<returns>实例</returns>
			<exception cref="T:Artemis.Data.Core.Exceptions.CreateInstanceException">创建实例异常</exception>
		</member>
		<member name="T:Artemis.Data.Store.Extensions.QueryableExtensions">
			<summary>
				Queryable扩展
			</summary>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
			<summary>
				若条件为真则添加查询条件
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询</param>
			<param name="condition">检查条件</param>
			<param name="predicate">查询条件</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.Page``1(System.Linq.IQueryable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
			<summary>
				分页扩展
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询</param>
			<param name="page">页码(自1开始编码)</param>
			<param name="size">数据条目</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.Page``1(System.Linq.IQueryable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int64@)">
			<summary>
				分页扩展
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询</param>
			<param name="page">页码</param>
			<param name="size">数据条目</param>
			<param name="count">数据规模</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.Page``1(System.Linq.IQueryable{``0},Artemis.Data.Core.IPageSlot)">
			<summary>
				分页扩展
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询</param>
			<param name="request">分页请求</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.Page``1(System.Linq.IQueryable{``0},Artemis.Data.Core.IPageSlot,System.Int64@)">
			<summary>
				分页扩展
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询</param>
			<param name="request">分页请求</param>
			<param name="count">数据规模</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.MapPageAsync``3(System.Linq.IQueryable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
			<summary>
				映射式分页
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<typeparam name="TKey">实体键类型</typeparam>
			<typeparam name="TEntityInfo">映射类型</typeparam>
			<param name="query">查询</param>
			<param name="page">页码</param>
			<param name="size">条目数</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.MapPageAsync``3(System.Linq.IQueryable{``0},Artemis.Data.Core.IPageSlot,System.Threading.CancellationToken)">
			<summary>
				映射式分页
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<typeparam name="TKey">实体键类型</typeparam>
			<typeparam name="TEntityInfo">映射类型</typeparam>
			<param name="query">查询</param>
			<param name="request">页码</param>
			<param name="cancellationToken">条目数</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.ApplyOrder``1(System.Linq.IQueryable{``0},System.String,System.String)">
			<summary>
				提交排序
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询</param>
			<param name="propertyName">属性名</param>
			<param name="methodName">方法名</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
			<summary>
				排序 ASC
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询条件</param>
			<param name="propertyName">属性名</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
			<summary>
				多字段排序ASC
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询</param>
			<param name="propertyName">字段名</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
			<summary>
				排序 DESC
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询条件</param>
			<param name="propertyName">排序字段名</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Extensions.QueryableExtensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
			<summary>
				多字段排序Desc
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<param name="query">查询</param>
			<param name="propertyName">字段名</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.Formatter">
			<summary>
				格式化资源
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Formatter.FormatNotFoundId(System.String)">
			<summary>
				格式化 未查询到Id为{0}的对象。 的本地化字符串。
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Formatter.FormatEntityNotFound(System.String,System.String)">
			<summary>
				格式化未 查询到类型为{0}的对象。 的本地化字符串
			</summary>
			<param name="entity"></param>
			<param name="flag"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Formatter.FormatEntityHasBeenSet(System.String,System.String)">
			<summary>
				格式化类型为{0}的对象已存在。 的本地化字符串
			</summary>
			<param name="entity"></param>
			<param name="flag"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Formatter.FormatPropertyIsNull(System.String)">
			<summary>
				格式化属性{0}为空。 的本地化字符串
			</summary>
			<param name="propertyName">属性名</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.IStore`1">
			<summary>
				存储接口
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IStore`2">
			<summary>
				存储接口
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IStore`3">
			<summary>
				存储接口
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IKeyLessStore`1">
			<summary>
				无键存储接口
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IKeyLessStore`2">
			<summary>
				无键存储接口
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member name="P:Artemis.Data.Store.IKeyLessStore`2.HandlerRegister">
			<summary>
				注册操作员
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStore`2.GenerateKey(`0)">
			<summary>
				生成键
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.IStoreCommon`1">
			<summary>
				通用存储接口
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IStoreCommon`2">
			<summary>
				通用存储接口
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<typeparam name="TKey">键类型</typeparam>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.KeyMatchQuery(`1)">
			<summary>
				键适配查询
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.KeyMatchQuery(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				键适配查询
			</summary>
			<param name="keys"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.GetId(`0)">
			<summary>
				获取指定实体Id
			</summary>
			<param name="entity">实体</param>
			<returns>Id</returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.GetIdAsync(`0,System.Threading.CancellationToken)">
			<summary>
				获取指定实体Id
			</summary>
			<param name="entity">实体</param>
			<param name="cancellationToken">取消异步操作的信号</param>
			<returns>Id</returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.GetIdString(`0)">
			<summary>
				获取指定实体Id字符串
			</summary>
			<param name="entity">实体</param>
			<returns>Id字符串</returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.GetIdStringAsync(`0,System.Threading.CancellationToken)">
			<summary>
				获取指定实体Id字符串
			</summary>
			<param name="entity">实体</param>
			<param name="cancellationToken">取消异步操作信号</param>
			<returns>Id字符串</returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.IsDeleted(`0)">
			<summary>
				是否被删除
			</summary>
			<param name="entity">实体</param>
			<returns>判断结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.IsDeleted(`1)">
			<summary>
				是否被删除
			</summary>
			<param name="key">键</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.IsDeletedAsync(`0,System.Threading.CancellationToken)">
			<summary>
				是否被删除
			</summary>
			<param name="entity">实体</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>判断结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.IsDeletedAsync(`1,System.Threading.CancellationToken)">
			<summary>
				是否被删除
			</summary>
			<param name="key">键</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdate(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
			<summary>
				更新存储中的实体
			</summary>
			<param name="id">被更新实体的主键</param>
			<param name="setter">更新行为</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdate(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
			<summary>
				在存储中更新已存在的实体
			</summary>
			<param name="ids">被更新实体的主键</param>
			<param name="setter">更新行为</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdateAsync(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
			<summary>
				在存储中更新已存在的实体
			</summary>
			<param name="id">被更新实体的主键</param>
			<param name="setter">更新行为</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreCommon`2.BatchUpdateAsync(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
			<summary>
				在存储中更新已存在的实体
			</summary>
			<param name="ids">被更新实体的主键</param>
			<param name="setter">更新行为</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.Delete(`1)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="id">被删除实体的主键</param>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.Delete(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="ids">被删除实体的主键</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.DeleteAsync(`1,System.Threading.CancellationToken)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="id">被删除实体的主键</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreCommon`2.DeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="ids">被删除实体的主键</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDelete(`1)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="id">被删除实体的主键</param>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDelete(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="ids">被删除实体的主键</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.BatchDeleteAsync(`1,System.Threading.CancellationToken)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="id">被删除实体的主键</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreCommon`2.BatchDeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="ids">被删除实体的主键</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntity(`1)">
			<summary>
				根据Id查找实体
			</summary>
			<param name="id"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntities(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				根据Id查找实体
			</summary>
			<param name="ids"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.FindEntityAsync(`1,System.Threading.CancellationToken)">
			<summary>
				根据Id查找实体
			</summary>
			<param name="id"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreCommon`2.FindEntitiesAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				根据Id查找实体
			</summary>
			<param name="ids"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.Exists(`1)">
			<summary>
				判断实体是否存在
			</summary>
			<param name="id">实体键</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreCommon`2.ExistsAsync(`1,System.Threading.CancellationToken)">
			<summary>
				判断实体是否存在
			</summary>
			<param name="id">实体键</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.IKeyLessStoreCommon`1">
			<summary>
				无键模型通用存储接口
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IKeyLessStoreCommon`1.EntitySet">
			<summary>
				Entity集合访问器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IKeyLessStoreCommon`1.TrackingQuery">
			<summary>
				Entity有追踪访问器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IKeyLessStoreCommon`1.EntityQuery">
			<summary>
				Entity无追踪访问器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IKeyLessStoreCommon`1.StoreName">
			<summary>
				存储名称
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Create(`0)">
			<summary>
				在<paramref name="entity" />存储中创建一个新的实体
			</summary>
			<param name="entity">被创建实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Create(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				在<paramref name="entities" />存储中创建多个新的实体
			</summary>
			<param name="entities">被创建实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.CreateAsync(`0,System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entity" />存储中创建一个新的实体
			</summary>
			<param name="entity">被创建实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.CreateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entities" />存储中创建多个新的实体
			</summary>
			<param name="entities">被创建实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Update(`0)">
			<summary>
				在<paramref name="entity" />存储中更新已存在的实体
			</summary>
			<param name="entity">被更新实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Update(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				在<paramref name="entities" />存储中更新多个已存在的实体
			</summary>
			<param name="entities">被更新实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.UpdateAsync(`0,System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entity" />存储中更新已存在的实体
			</summary>
			<param name="entity">被更新实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entities" />存储中更新多个已存在的实体
			</summary>
			<param name="entities">被更新实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchUpdate(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				在存储中更新符合条件的实体
			</summary>
			<param name="setter">更新行为</param>
			<param name="predicate">查询表达式</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchUpdate(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
			<summary>
				在存储中更新符合查询描述的实体
			</summary>
			<param name="query"></param>
			<param name="setter">更新行为</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchUpdateAsync(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
			<summary>
				在存储中更新符合条件的实体
			</summary>
			<param name="setter">更新行为</param>
			<param name="predicate">查询表达式</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchUpdateAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
			<summary>
				在存储中更新符合查询描述的实体
			</summary>
			<param name="query"></param>
			<param name="setter">更新行为</param>
			<param name="cancellationToken"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Delete(`0)">
			<summary>
				在<paramref name="entity" />存储中删除已存在的实体
			</summary>
			<param name="entity">被删除实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.Delete(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				在<paramref name="entities" />存储中删除已存在的实体
			</summary>
			<param name="entities">被删除实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.DeleteAsync(`0,System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entity" />存储中删除已存在的实体
			</summary>
			<param name="entity">被删除实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entities" />存储中删除已存在的实体
			</summary>
			<param name="entities">被删除实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				在存储中删除符合条件的实体
			</summary>
			<param name="predicate">查询表达式</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchDelete(System.Linq.IQueryable{`0})">
			<summary>
				在存储中删除符合查询描述的实体
			</summary>
			<param name="query"></param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
			<summary>
				在存储中删除符合条件的实体
			</summary>
			<param name="predicate">查询表达式</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreCommon`1.BatchDeleteAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
			<summary>
				在存储中删除符合查询描述的实体
			</summary>
			<param name="query"></param>
			<param name="cancellationToken"></param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.IStoreMap`1">
			<summary>
				可映射存储接口
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IStoreMap`2">
			<summary>
				可映射存储接口
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<typeparam name="TKey">键类型</typeparam>
		</member>
		<member name="M:Artemis.Data.Store.IStoreMap`2.FindMapEntity``1(`1)">
			<summary>
				根据id查找映射实体
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="id">id</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreMap`2.FindMapEntities``1(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				根据id查找映射实体
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="ids">ids</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreMap`2.FindMapEntityAsync``1(`1,System.Threading.CancellationToken)">
			<summary>
				根据Id查找映射实体
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="id"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreMap`2.FindMapEntitiesAsync``1(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				根据Id查找映射实体
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="ids"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreMap`2.Over``1(``0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射覆盖对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreMap`2.Over``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射覆盖对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreMap`2.OverAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射覆盖对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreMap`2.OverAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射覆盖对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreMap`2.Merge``1(``0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射合并对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreMap`2.Merge``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射合并对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreMap`2.MergeAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射合并对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IStoreMap`2.MergeAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射合并对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.IKeyLessStoreMap`1">
			<summary>
				无键可映射存储接口
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.CreateNew``1(``0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射创建一个新实例
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<returns>创建结果</returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.CreateNew``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射创建一组新实例
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<returns>创建结果</returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.CreateNewAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射创建一个新实例
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns>创建结果</returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.CreateNewAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射创建一个新实例
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns>创建结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.Over``1(``0,`0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射覆盖对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="destination">目标数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.Over``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射覆盖对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<typeparam name="TJKey">连接键类型</typeparam>
			<param name="sources">源数据</param>
			<param name="destinations">目标数据</param>
			<param name="destinationKeySelector">目标键选择器</param>
			<param name="config">映射配置</param>
			<param name="sourceKeySelector">源键选择器</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.OverAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射覆盖对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="destination">目标数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.OverAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射覆盖对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<typeparam name="TJKey">连接键类型</typeparam>
			<param name="sources">源数据</param>
			<param name="destinations">目标数据</param>
			<param name="destinationKeySelector">目标键选择器</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<param name="sourceKeySelector">源键选择器</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IKeyLessStoreMap`1.Merge``1(``0,`0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射合并对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="destination">目标数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射合并对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<typeparam name="TJKey">连接键类型</typeparam>
			<param name="sources">源数据</param>
			<param name="destinations">目标数据</param>
			<param name="destinationKeySelector">目标键选择器</param>
			<param name="config">映射配置</param>
			<param name="sourceKeySelector">源键选择器</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.MergeAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射合并对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="destination">目标数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IKeyLessStoreMap`1.MergeAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射合并对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<typeparam name="TJKey">连接键类型</typeparam>
			<param name="sources">源数据</param>
			<param name="destinations">目标数据</param>
			<param name="destinationKeySelector">目标键选择器</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<param name="sourceKeySelector">源键选择器</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.IManager`1">
			<summary>
				提供用于管理具键存储模型TEntity的存储器的API接口
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IManager`2">
			<summary>
				提供用于管理具键存储模型TEntity的存储器的API接口
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IManager`3">
			<summary>
				提供用于管理具键存储模型TEntity的存储器的API接口
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member name="M:Artemis.Data.Store.IManager`3.GetEntityAsync``1(`1,System.Threading.CancellationToken)">
			<summary>
				获取实体信息
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<param name="id">实体标识</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IManager`3.GetEntitiesAsync``1(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
			<summary>
				获取实体信息列表
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<param name="page">页码</param>
			<param name="size">条目数</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>实体信息列表</returns>
		</member>
		<member name="M:Artemis.Data.Store.IManager`3.CreateEntityAsync``2(``1,System.Threading.CancellationToken)">
			<summary>
				创建实体
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<typeparam name="TEntityPack">实体包类型</typeparam>
			<param name="package">实体包</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>创建结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.IManager`3.UpdateEntityAsync``2(`1,``1,System.Threading.CancellationToken)">
			<summary>
				更新实体
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<typeparam name="TEntityPack">实体包类型</typeparam>
			<param name="id">实体键</param>
			<param name="pack">实体包</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>更新结果</returns>
		</member>
		<member
			name="M:Artemis.Data.Store.IManager`3.UpdateOrCreateEntityAsync``2(`1,``1,System.Threading.CancellationToken)">
			<summary>
				更新或创建实体
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<typeparam name="TEntityPack">实体包类型</typeparam>
			<param name="id">实体键</param>
			<param name="package">实体包</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>更新或创建结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.IManager`3.DeleteEntityAsync(`1,System.Threading.CancellationToken)">
			<summary>
				删除实体
			</summary>
			<param name="id">标识</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>删除结果</returns>
		</member>
		<member name="T:Artemis.Data.Store.IKeyLessManager`1">
			<summary>
				提供用于管理无键存储模型TEntity的存储器的API接口
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="T:Artemis.Data.Store.IKeyLessManager`2">
			<summary>
				提供用于管理无键存储模型TEntity的存储器的API接口
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member name="P:Artemis.Data.Store.IKeyLessManager`2.HandlerRegister">
			<summary>
				注册操作员
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.Manager`1">
			<summary>
				提供用于管理具键存储模型TEntity的存储器的API
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Manager`1.#ctor(Artemis.Data.Store.IStore{`0},Artemis.Data.Store.IManagerOptions,Microsoft.Extensions.Logging.ILogger)">
			<summary>
				创建新的管理器实例
			</summary>
			<param name="store">存储访问器依赖</param>
			<param name="options">配置依赖</param>
			<param name="logger">日志依赖</param>
			<exception cref="T:System.ArgumentNullException"></exception>
		</member>
		<member name="P:Artemis.Data.Store.Manager`1.EntityStore">
			<summary>
				实体存储
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.Manager`2">
			<summary>
				提供用于管理具键存储模型TEntity的存储器的API
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Manager`2.#ctor(Artemis.Data.Store.IStore{`0,`1},Artemis.Data.Store.IManagerOptions,Microsoft.Extensions.Logging.ILogger)">
			<summary>
				创建新的管理器实例
			</summary>
			<param name="store">存储访问器依赖</param>
			<param name="options">配置依赖</param>
			<param name="logger">日志依赖</param>
			<exception cref="T:System.ArgumentNullException"></exception>
		</member>
		<member name="P:Artemis.Data.Store.Manager`2.EntityStore">
			<summary>
				实体存储
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.Manager`3">
			<summary>
				提供用于管理具键存储模型TEntity的存储器的API
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Manager`3.#ctor(Artemis.Data.Store.IStore{`0,`1,`2},Artemis.Data.Store.IManagerOptions,Microsoft.Extensions.Logging.ILogger)">
			<summary>
				创建新的管理器实例
			</summary>
			<param name="store">存储访问器依赖</param>
			<param name="options">配置依赖</param>
			<param name="logger">日志依赖</param>
			<exception cref="T:System.ArgumentNullException"></exception>
		</member>
		<member name="P:Artemis.Data.Store.Manager`3.EntityStore">
			<summary>
				实体存储
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Manager`3.GetEntityAsync``1(`1,System.Threading.CancellationToken)">
			<summary>
				获取实体信息
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<param name="id">实体标识</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Manager`3.GetEntitiesAsync``1(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
			<summary>
				获取实体信息列表
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<param name="page">页码</param>
			<param name="size">条目数</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>实体信息列表</returns>
		</member>
		<member name="M:Artemis.Data.Store.Manager`3.CreateEntityAsync``2(``1,System.Threading.CancellationToken)">
			<summary>
				创建实体
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<typeparam name="TEntityPack">实体包类型</typeparam>
			<param name="package">实体包</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>创建结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.Manager`3.UpdateEntityAsync``2(`1,``1,System.Threading.CancellationToken)">
			<summary>
				更新实体
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<typeparam name="TEntityPack">实体包类型</typeparam>
			<param name="id">实体键</param>
			<param name="pack">实体包</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>更新结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.Manager`3.UpdateOrCreateEntityAsync``2(`1,``1,System.Threading.CancellationToken)">
			<summary>
				更新或创建实体
			</summary>
			<typeparam name="TEntityInfo">实体信息类型</typeparam>
			<typeparam name="TEntityPack">实体包类型</typeparam>
			<param name="id">实体键</param>
			<param name="package">实体包</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>更新或创建结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.Manager`3.DeleteEntityAsync(`1,System.Threading.CancellationToken)">
			<summary>
				删除实体
			</summary>
			<param name="id">标识</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>删除结果</returns>
		</member>
		<member name="T:Artemis.Data.Store.KeyLessManager`1">
			<summary>
				提供用于管理无键存储模型TEntity的存储器的API
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessManager`1.#ctor(Artemis.Data.Store.IKeyLessStore{`0},Artemis.Data.Store.IManagerOptions,Microsoft.Extensions.Logging.ILogger)">
			<summary>
				创建新的管理器实例
			</summary>
			<param name="store">存储访问器依赖</param>
			<param name="options">配置依赖</param>
			<param name="logger">日志依赖</param>
			<exception cref="T:System.ArgumentNullException"></exception>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessManager`1.EntityStore">
			<summary>
				实体存储
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.KeyLessManager`2">
			<summary>
				提供用于管理无键存储模型TEntity的存储器的API
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessManager`2.#ctor(Artemis.Data.Store.IKeyLessStore{`0,`1},Artemis.Data.Store.IManagerOptions,Microsoft.Extensions.Logging.ILogger)">
			<summary>
				创建新的管理器实例
			</summary>
			<param name="store">存储访问器依赖</param>
			<param name="options">配置依赖</param>
			<param name="logger">日志依赖</param>
			<exception cref="T:System.ArgumentNullException"></exception>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessManager`2.EnableLogger">
			<summary>
				是否启用Debug日志
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessManager`2.OnAsyncActionExecuting(System.Threading.CancellationToken)">
			<summary>
				异步函数执行前
			</summary>
			<param name="cancellationToken"></param>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessManager`2.Options">
			<summary>
				具键存储管理器配置接口
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessManager`2.Logger">
			<summary>
				日志依赖访问器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessManager`2.EntityStore">
			<summary>
				实体存储
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessManager`2.HandlerRegister">
			<summary>
				注册操作员
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.KeyLessManager`2._disposed">
			<summary>
				标记资源是否已被或是否需要释放
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessManager`2.Dispose">
			<summary>
				Releases all resources used by the user manager.
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessManager`2.Dispose(System.Boolean)">
			<summary>
				Releases the unmanaged resources used by the role manager and optionally releases the managed resources.
			</summary>
			<param name="disposing">
				true to release both managed and unmanaged resources; false to release only unmanaged
				resources.
			</param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessManager`2.StoreDispose">
			<summary>
				释放托管的Store
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessManager`2.ThrowIfDisposed">
			<summary>
				Throws if this class has been disposed.
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.IManagerOptions">
			<summary>
				具键存储管理器配置接口
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IManagerOptions.EnableLogger">
			<summary>
				是否启用Debug日志
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.ManagerOptions">
			<summary>
				具键存储管理器配置实例
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.ManagerOptions.EnableLogger">
			<summary>
				是否启用Debug日志
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.Resources">
			<summary>
				一个强类型的资源类，用于查找本地化的字符串等。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.ResourceManager">
			<summary>
				返回此类使用的缓存的 ResourceManager 实例。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.Culture">
			<summary>
				重写当前线程的 CurrentUICulture 属性，对
				使用此强类型资源类的所有资源查找执行重写。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.ConcurrencyFailure">
			<summary>
				查找类似 乐观并发失败，对象已被修改。 的本地化字符串。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.DefaultError">
			<summary>
				查找类似 发生未知异常。 的本地化字符串。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.EnableCache">
			<summary>
				查找类似 当前Store已启用具缓存策略。 的本地化字符串。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.EntityHasBeenSet">
			<summary>
				查找类似 对象&apos;{0}&apos;已被设置,Flag:&apos;{1}&apos;。 的本地化字符串。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.EntityNotFound">
			<summary>
				查找类似 未找到匹配的&apos;{0}&apos;对象,Flag:&apos;{1}&apos;。 的本地化字符串。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.NotFoundId">
			<summary>
				查找类似 未查询到Id为 &apos;{0}&apos; 的对象。 的本地化字符串。
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.Resources.PropertyIsNull">
			<summary>
				查找类似 必要参数&apos;{0}&apos;的值为空。 的本地化字符串。
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.Store`1">
			<summary>
				存储实现
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,Artemis.Data.Store.IStoreOptions,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.StoreErrorDescriber)">
			<summary>
				基本存储实例构造
			</summary>
			<param name="context"></param>
			<param name="storeOptions"></param>
			<param name="cache"></param>
			<param name="logger"></param>
			<param name="describer"></param>
		</member>
		<member name="P:Artemis.Data.Store.Store`1.EntityKey">
			<summary>
				实体键生成委托
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Store`1.ConvertIdFromString(System.String)">
			<summary>
				转换字符串到id
			</summary>
			<param name="id">id字符串</param>
			<returns>id</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`1.ConvertIdToString(System.Guid)">
			<summary>
				转换Id为字符串
			</summary>
			<param name="id">id</param>
			<returns>字符串</returns>
		</member>
		<member name="T:Artemis.Data.Store.Store`2">
			<summary>
				存储实现
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`2.#ctor(Microsoft.EntityFrameworkCore.DbContext,Artemis.Data.Store.IStoreOptions,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.StoreErrorDescriber)">
			<summary>
				基本存储实例构造
			</summary>
			<param name="context"></param>
			<param name="storeOptions"></param>
			<param name="cache"></param>
			<param name="logger"></param>
			<param name="describer"></param>
		</member>
		<member name="T:Artemis.Data.Store.Store`3">
			<summary>
				存储实现
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TKey"></typeparam>
			<typeparam name="THandler"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.#ctor(Microsoft.EntityFrameworkCore.DbContext,Artemis.Data.Store.IStoreOptions,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.StoreErrorDescriber)">
			<summary>
				基本存储实例构造
			</summary>
			<param name="context"></param>
			<param name="storeOptions"></param>
			<param name="cache"></param>
			<param name="logger"></param>
			<param name="describer"></param>
			<exception cref="T:Artemis.Data.Core.Exceptions.StoreParameterNullException"></exception>
		</member>
		<member name="P:Artemis.Data.Store.Store`3.EntityKey">
			<summary>
				实体键生成委托
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.ConvertToEntityKey(`1)">
			<summary>
				生成键
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.KeyMatchQuery(`1)">
			<summary>
				键适配查询
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.KeyMatchQuery(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				键适配查询
			</summary>
			<param name="keys"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.ConvertIdFromString(System.String)">
			<summary>
				转换字符串到id
			</summary>
			<param name="id">id字符串</param>
			<returns>id</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.ConvertIdToString(`1)">
			<summary>
				转换Id为字符串
			</summary>
			<param name="id">id</param>
			<returns>字符串</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.GetId(`0)">
			<summary>
				获取指定实体Id
			</summary>
			<param name="entity">实体</param>
			<returns>Id</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.GetIdAsync(`0,System.Threading.CancellationToken)">
			<summary>
				获取指定实体Id
			</summary>
			<param name="entity">实体</param>
			<param name="cancellationToken">取消异步操作的信号</param>
			<returns>Id</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.GetIdString(`0)">
			<summary>
				获取指定实体Id字符串
			</summary>
			<param name="entity">实体</param>
			<returns>Id字符串</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.GetIdStringAsync(`0,System.Threading.CancellationToken)">
			<summary>
				获取指定实体Id字符串
			</summary>
			<param name="entity">实体</param>
			<param name="cancellationToken">取消异步操作信号</param>
			<returns>Id字符串</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.IsDeleted(`0)">
			<summary>
				是否被删除
			</summary>
			<param name="entity">实体</param>
			<returns>判断结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.IsDeleted(`1)">
			<summary>
				是否被删除
			</summary>
			<param name="key">键</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.IsDeletedAsync(`0,System.Threading.CancellationToken)">
			<summary>
				是否被删除
			</summary>
			<param name="entity">实体</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns>判断结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.IsDeletedAsync(`1,System.Threading.CancellationToken)">
			<summary>
				是否被删除
			</summary>
			<param name="key">键</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.BatchUpdate(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
			<summary>
				更新存储中的实体
			</summary>
			<param name="id">被更新实体的主键</param>
			<param name="setter">更新行为</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.BatchUpdate(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
			<summary>
				在存储中更新已存在的实体
			</summary>
			<param name="ids">被更新实体的主键</param>
			<param name="setter">更新行为</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.BatchUpdateAsync(`1,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
			<summary>
				在存储中更新已存在的实体
			</summary>
			<param name="id">被更新实体的主键</param>
			<param name="setter">更新行为</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.BatchUpdateAsync(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
			<summary>
				在存储中更新已存在的实体
			</summary>
			<param name="ids">被更新实体的主键</param>
			<param name="setter">更新行为</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.Delete(`1)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="id">被删除实体的主键</param>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.Delete(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="ids">被删除实体的主键</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.DeleteAsync(`1,System.Threading.CancellationToken)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="id">被删除实体的主键</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.DeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="ids">被删除实体的主键</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.BatchDelete(`1)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="id">被删除实体的主键</param>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.BatchDelete(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="ids">被删除实体的主键</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.BatchDeleteAsync(`1,System.Threading.CancellationToken)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="id">被删除实体的主键</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.BatchDeleteAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				在存储中删除已存在的实体
			</summary>
			<param name="ids">被删除实体的主键</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindEntity(`1)">
			<summary>
				根据Id查找实体
			</summary>
			<param name="id"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindEntities(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				根据Id查找实体
			</summary>
			<param name="ids"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindEntityAsync(`1,System.Threading.CancellationToken)">
			<summary>
				根据Id查找实体
			</summary>
			<param name="id"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.FindEntitiesAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				根据Id查找实体
			</summary>
			<param name="ids"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.Exists(`1)">
			<summary>
				判断实体是否存在
			</summary>
			<param name="id">实体键</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.ExistsAsync(`1,System.Threading.CancellationToken)">
			<summary>
				判断实体是否存在
			</summary>
			<param name="id">实体键</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindMapEntity``1(`1)">
			<summary>
				根据id查找映射实体
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="id">id</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindMapEntities``1(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				根据id查找映射实体
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="ids">ids</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindMapEntityAsync``1(`1,System.Threading.CancellationToken)">
			<summary>
				根据Id查找映射实体
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="id"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.FindMapEntitiesAsync``1(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				根据Id查找映射实体
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="ids"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.Over``1(``0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射覆盖对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.Over``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射覆盖对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.OverAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射覆盖对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.OverAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射覆盖对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.Merge``1(``0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射合并对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.Merge``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射合并对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.MergeAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射合并对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.MergeAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射合并对应Id的实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindById(`1)">
			<summary>
				根据Id查询实体
			</summary>
			<param name="id">id</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindById``1(`1)">
			<summary>
				根据Id查询实体并映射到指定类型
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="id">id</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindByIds(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				根据Id查询实体
			</summary>
			<param name="ids">id表</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindByIds``1(System.Collections.Generic.IEnumerable{`1})">
			<summary>
				根据Id查询实体并映射到指定类型
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="ids">id表</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindByIdAsync(`1,System.Threading.CancellationToken)">
			<summary>
				根据Id查找实体
			</summary>
			<param name="id"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.Store`3.FindByIdAsync``1(`1,System.Threading.CancellationToken)">
			<summary>
				根据Id查询实体并映射到指定类型
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="id"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.FindByIdsAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				根据Id查找实体
			</summary>
			<param name="ids"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.Store`3.FindByIdsAsync``1(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
			<summary>
				根据Id查询实体并映射到指定类型
			</summary>
			<typeparam name="TMapEntity">映射类型</typeparam>
			<param name="ids"></param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.KeyLessStore`1">
			<summary>
				无键模型存储接
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,Artemis.Data.Store.IStoreOptions,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.StoreErrorDescriber)">
			<summary>
				无键模型基本存储实例构造
			</summary>
			<param name="context"></param>
			<param name="storeOptions"></param>
			<param name="cache"></param>
			<param name="logger"></param>
			<param name="describer"></param>
			<exception cref="T:Artemis.Data.Core.Exceptions.StoreParameterNullException"></exception>
		</member>
		<member name="T:Artemis.Data.Store.KeyLessStore`2">
			<summary>
				无键数据模型存储
			</summary>
			<typeparam name="TEntity">模型类型</typeparam>
			<typeparam name="THandler">操作者类型</typeparam>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.#ctor(Microsoft.EntityFrameworkCore.DbContext,Artemis.Data.Store.IStoreOptions,Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger,Artemis.Data.Store.StoreErrorDescriber)">
			<summary>
				无键模型基本存储实例构造
			</summary>
			<param name="context"></param>
			<param name="storeOptions"></param>
			<param name="cache"></param>
			<param name="logger"></param>
			<param name="describer"></param>
			<exception cref="T:Artemis.Data.Core.Exceptions.StoreParameterNullException"></exception>
		</member>
		<member name="F:Artemis.Data.Store.KeyLessStore`2._disposed">
			<summary>
				已释放标识
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.ThrowIfDisposed">
			<summary>
				Throws if this class has been disposed.
			</summary>
			<exception cref="T:Artemis.Data.Core.Exceptions.StoreDisposedException"></exception>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Dispose">
			<summary>
				Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.HandlerRegister">
			<summary>
				注册操作员委托
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.GenerateKey(`0)">
			<summary>
				生成键
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.Cache">
			<summary>
				缓存依赖
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.Context">
			<summary>
				数据访问上下文
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.Logger">
			<summary>
				日志依赖
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.StoreOptions">
			<summary>
				存储配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.Describer">
			<summary>
				设置当前发生错误的错误描述者
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.EntitySet">
			<summary>
				Entity集合访问器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.TrackingQuery">
			<summary>
				Entity有追踪访问器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.EntityQuery">
			<summary>
				Entity无追踪访问器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.StoreName">
			<summary>
				存储名称
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.EntityKey">
			<summary>
				实体键生成委托
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.DebugLogger">
			<summary>
				是否启用Debug日志
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.AutoSaveChanges">
			<summary>
				设置是否自动保存更改
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.MetaDataHosting">
			<summary>
				元数据托管标识
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.SoftDelete">
			<summary>
				软删除标识
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.HandlerHosting">
			<summary>
				操作员托管标识
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.CachedStore">
			<summary>
				是否启用缓存
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.KeyLessStore`2.Expires">
			<summary>
				缓存过期时间
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Create(`0)">
			<summary>
				在<paramref name="entity" />存储中创建一个新的实体
			</summary>
			<param name="entity">被创建实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Create(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				在<paramref name="entities" />存储中创建多个新的实体
			</summary>
			<param name="entities">被创建实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.CreateAsync(`0,System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entity" />存储中创建一个新的实体
			</summary>
			<param name="entity">被创建实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.CreateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entities" />存储中创建多个新的实体
			</summary>
			<param name="entities">被创建实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Update(`0)">
			<summary>
				在<paramref name="entity" />存储中更新已存在的实体
			</summary>
			<param name="entity">被更新实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Update(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				在<paramref name="entities" />存储中更新多个已存在的实体
			</summary>
			<param name="entities">被更新实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.UpdateAsync(`0,System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entity" />存储中更新已存在的实体
			</summary>
			<param name="entity">被更新实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entities" />存储中更新多个已存在的实体
			</summary>
			<param name="entities">被更新实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchUpdate(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				在存储中更新符合条件的实体
			</summary>
			<param name="setter">更新行为</param>
			<param name="predicate">查询表达式</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchUpdate(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
			<summary>
				在存储中更新符合查询描述的实体
			</summary>
			<param name="query"></param>
			<param name="setter">更新行为</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchUpdateAsync(System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
			<summary>
				在存储中更新符合条件的实体
			</summary>
			<param name="setter">更新行为</param>
			<param name="predicate">查询表达式</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchUpdateAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
			<summary>
				在存储中更新符合查询描述的实体
			</summary>
			<param name="query"></param>
			<param name="setter">更新行为</param>
			<param name="cancellationToken"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Delete(`0)">
			<summary>
				在<paramref name="entity" />存储中删除已存在的实体
			</summary>
			<param name="entity">被删除实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Delete(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				在<paramref name="entities" />存储中删除已存在的实体
			</summary>
			<param name="entities">被删除实体</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.DeleteAsync(`0,System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entity" />存储中删除已存在的实体
			</summary>
			<param name="entity">被删除实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
			<summary>
				在<paramref name="entities" />存储中删除已存在的实体
			</summary>
			<param name="entities">被删除实体</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				在存储中删除符合条件的实体
			</summary>
			<param name="predicate">查询表达式</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.BatchDelete(System.Linq.IQueryable{`0})">
			<summary>
				在存储中删除符合查询描述的实体
			</summary>
			<param name="query"></param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
			<summary>
				在存储中删除符合条件的实体
			</summary>
			<param name="predicate">查询表达式</param>
			<param name="cancellationToken">操作取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchDeleteAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
			<summary>
				在存储中删除符合查询描述的实体
			</summary>
			<param name="query"></param>
			<param name="cancellationToken"></param>
			<returns></returns>
		</member>
		<member name="F:Artemis.Data.Store.KeyLessStore`2._createNewConfig">
			<summary>
				创建新对象的映射配置缓存
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.CreateNewConfig``1">
			<summary>
				创建新对象的映射配置
			</summary>
			<typeparam name="TSource"></typeparam>
			<returns></returns>
		</member>
		<member name="F:Artemis.Data.Store.KeyLessStore`2._overCertaintyConfig">
			<summary>
				覆盖对象的映射配置缓存(对象明确)
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.KeyLessStore`2._overDeCertaintyConfig">
			<summary>
				覆盖对象的映射配置缓存(对象不明确)
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.OverConfig``1(System.Boolean)">
			<summary>
				覆盖对象的映射配置
			</summary>
			<typeparam name="TSource"></typeparam>
			<param name="certainty">对象是否明确</param>
			<returns></returns>
		</member>
		<member name="F:Artemis.Data.Store.KeyLessStore`2._mergeCertaintyConfig">
			<summary>
				合并对象的映射配置缓存(对象明确)
			</summary>
		</member>
		<member name="F:Artemis.Data.Store.KeyLessStore`2._mergeDeCertaintyConfig">
			<summary>
				合并对象的映射配置缓存(对象不明确)
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.MergeConfig``1(System.Boolean)">
			<summary>
				合并对象的映射配置
			</summary>
			<param name="certainty"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.CreateNew``1(``0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射创建一个新实例
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<returns>创建结果</returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.CreateNew``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射创建一组新实例
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<returns>创建结果</returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.CreateNewAsync``1(``0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射创建一个新实例
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns>创建结果</returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.CreateNewAsync``1(System.Collections.Generic.IEnumerable{``0},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射创建一个新实例
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="sources">源数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns>创建结果</returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Over``1(``0,`0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射覆盖对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="destination">目标数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.Over``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射覆盖对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<typeparam name="TJKey">连接键类型</typeparam>
			<param name="sources">源数据</param>
			<param name="destinations">目标数据</param>
			<param name="destinationKeySelector">目标键选择器</param>
			<param name="config">映射配置</param>
			<param name="sourceKeySelector">源键选择器</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.OverAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射覆盖对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="destination">目标数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.OverAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射覆盖对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<typeparam name="TJKey">连接键类型</typeparam>
			<param name="sources">源数据</param>
			<param name="destinations">目标数据</param>
			<param name="destinationKeySelector">目标键选择器</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<param name="sourceKeySelector">源键选择器</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.Merge``1(``0,`0,Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射合并对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="destination">目标数据</param>
			<param name="config">映射配置</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig)">
			<summary>
				通过类型映射合并对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<typeparam name="TJKey">连接键类型</typeparam>
			<param name="sources">源数据</param>
			<param name="destinations">目标数据</param>
			<param name="destinationKeySelector">目标键选择器</param>
			<param name="config">映射配置</param>
			<param name="sourceKeySelector">源键选择器</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.MergeAsync``1(``0,`0,Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射合并对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<param name="source">源数据</param>
			<param name="destination">目标数据</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.MergeAsync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{`0},System.Func{``0,``1},System.Func{`0,``1},Mapster.TypeAdapterConfig,System.Threading.CancellationToken)">
			<summary>
				通过类型映射合并对应实体
			</summary>
			<typeparam name="TSource">源类型</typeparam>
			<typeparam name="TJKey">连接键类型</typeparam>
			<param name="sources">源数据</param>
			<param name="destinations">目标数据</param>
			<param name="destinationKeySelector">目标键选择器</param>
			<param name="config">映射配置</param>
			<param name="cancellationToken">取消信号</param>
			<param name="sourceKeySelector">源键选择器</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.CacheKey(`0)">
			<summary>
				生成键
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.CacheKey(System.String)">
			<summary>
				生成键
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.CacheEntity(`0)">
			<summary>
				缓存实体
			</summary>
			<param name="entity"></param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.CacheEntityAsync(`0,System.Threading.CancellationToken)">
			<summary>
				缓存实体
			</summary>
			<param name="entity"></param>
			<param name="cancellationToken"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.CacheEntities(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				缓存实体
			</summary>
			<param name="entities"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.CacheEntitiesAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
			<summary>
				缓存实体
			</summary>
			<param name="entities"></param>
			<param name="cancellationToken"></param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.GetEntity(System.String)">
			<summary>
				获取实体
			</summary>
			<param name="key">缓存键</param>
			<returns></returns>
			<exception cref="T:System.NotImplementedException"></exception>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.GetEntityAsync(System.String,System.Threading.CancellationToken)">
			<summary>
				获取实体
			</summary>
			<param name="key">缓存键</param>
			<param name="cancellationToken"></param>
			<returns></returns>
			<exception cref="T:System.NotImplementedException"></exception>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.GetEntities(System.Collections.Generic.IEnumerable{System.String})">
			<summary>
				获取实体
			</summary>
			<param name="keys">实体键列表</param>
			<returns></returns>
			<exception cref="T:System.NotImplementedException"></exception>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.GetEntitiesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
			<summary>
				获取实体
			</summary>
			<param name="keys">实体键列表</param>
			<param name="cancellationToken"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.RemoveCachedEntity(System.String)">
			<summary>
				移除被缓存的实体
			</summary>
			<param name="key"></param>
			<exception cref="T:Artemis.Data.Core.Exceptions.InstanceNotImplementException"></exception>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.RemoveCachedEntity(`0)">
			<summary>
				移除被缓存的实体
			</summary>
			<param name="entity"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.RemoveCachedEntityAsync(System.String,System.Threading.CancellationToken)">
			<summary>
				移除被缓存的实体
			</summary>
			<param name="key"></param>
			<param name="cancellationToken"></param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.RemoveCachedEntityAsync(`0,System.Threading.CancellationToken)">
			<summary>
				移除被缓存的实体
			</summary>
			<param name="entity"></param>
			<param name="cancellationToken"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.RemoveCachedEntities(System.Collections.Generic.IEnumerable{System.String})">
			<summary>
				移除被缓存的实体
			</summary>
			<param name="keys"></param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.RemoveCachedEntities(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				移除被缓存的实体
			</summary>
			<param name="entities"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.RemoveCachedEntitiesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
			<summary>
				移除被缓存的实体
			</summary>
			<param name="keys"></param>
			<param name="cancellationToken"></param>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.RemoveCachedEntitiesAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
			<summary>
				移除被缓存的实体
			</summary>
			<param name="entities"></param>
			<param name="cancellationToken"></param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.AddEntity(`0)">
			<summary>
				添加单个实体
			</summary>
			<param name="entity">实体</param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.AddEntities(System.Collections.Generic.ICollection{`0})">
			<summary>
				添加多个实体
			</summary>
			<param name="entities">实体</param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.UpdateEntity(`0)">
			<summary>
				追踪一个实体更新
			</summary>
			<param name="entity">实体</param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.UpdateEntities(System.Collections.Generic.ICollection{`0})">
			<summary>
				追踪多个实体更新
			</summary>
			<param name="entities">实体</param>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchUpdateEntity(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})">
			<summary>
				批量更新实体
			</summary>
			<param name="query">查询</param>
			<param name="setter">更新委托</param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchUpdateEntityAsync(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
			<summary>
				批量删除实体
			</summary>
			<param name="query">查询</param>
			<param name="setter">更新委托</param>
			<param name="cancellationToken">异步操作取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.DeleteEntity(`0)">
			<summary>
				追踪一个实体删除
			</summary>
			<param name="entity">实体</param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.DeleteEntities(System.Collections.Generic.ICollection{`0})">
			<summary>
				追踪多个实体删除
			</summary>
			<param name="entities">实体</param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.BatchDeleteEntity(System.Linq.IQueryable{`0})">
			<summary>
				批量删除实体
			</summary>
			<param name="query"></param>
			<returns></returns>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.BatchDeleteEntityAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
			<summary>
				异步批量删除实体
			</summary>
			<param name="query"></param>
			<param name="cancellationToken"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.OnActionExecuting``1(``0,System.String)">
			<summary>
				方法执行前
			</summary>
			<param name="value">实体</param>
			<param name="name">参数名</param>
			<exception cref="T:Artemis.Data.Core.Exceptions.StoreParameterNullException">空参数异常</exception>
		</member>
		<member
			name="M:Artemis.Data.Store.KeyLessStore`2.OnAsyncActionExecuting``1(``0,System.String,System.Threading.CancellationToken)">
			<summary>
				异步方法执行前
			</summary>
			<param name="value">实体</param>
			<param name="name">参数名</param>
			<param name="cancellationToken">取消信号</param>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.AttacheChange">
			<summary>
				保存追踪
			</summary>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.AttacheChangeAsync(System.Threading.CancellationToken)">
			<summary>
				保存异步追踪
			</summary>
			<param name="cancellationToken">取消信号</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.SaveChanges">
			<summary>
				保存当前存储
			</summary>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.KeyLessStore`2.SaveChangesAsync(System.Threading.CancellationToken)">
			<summary>
				保存当前存储
			</summary>
			<param name="cancellationToken">操作取消信号</param>
			<returns>异步取消结果</returns>
		</member>
		<member name="T:Artemis.Data.Store.IStoreErrorDescriber">
			<summary>
				存储异常描述接口
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.IStoreErrorDescriber.DefaultError">
			<summary>
				生成默认异常
			</summary>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreErrorDescriber.ConcurrencyFailure">
			<summary>
				提示并发失败异常
			</summary>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreErrorDescriber.NotFoundId(System.String)">
			<summary>
				提示未找到Id失败
			</summary>
			<param name="id"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreErrorDescriber.EnableCache">
			<summary>
				提示已允许具缓存策略
			</summary>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreErrorDescriber.EntityNotFound(System.String,System.String)">
			<summary>
				实体未找到
			</summary>
			<param name="entity"></param>
			<param name="flag"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.IStoreErrorDescriber.EntityHasBeenSet(System.String,System.String)">
			<summary>
				实体已存在
			</summary>
			<param name="entity"></param>
			<param name="flag"></param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.IStoreError">
			<summary>
				存储子系统错误接口
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreError.Code">
			<summary>
				错误编码
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreError.Description">
			<summary>
				错误描述
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.StoreErrorDescriber">
			<summary>
				存储异常描述器
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.StoreErrorDescriber.DefaultError">
			<summary>
				生成默认异常
			</summary>
			<returns>默认异常</returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreErrorDescriber.ConcurrencyFailure">
			<summary>
				提示发生并发失败
			</summary>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreErrorDescriber.NotFoundId(System.String)">
			<summary>
				提示未找到Id失败
			</summary>
			<param name="id"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreErrorDescriber.EnableCache">
			<summary>
				提示已允许具缓存策略
			</summary>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreErrorDescriber.EntityNotFound(System.String,System.String)">
			<summary>
				实体未找到
			</summary>
			<param name="entity"></param>
			<param name="flag"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreErrorDescriber.EntityHasBeenSet(System.String,System.String)">
			<summary>
				实体已存在
			</summary>
			<param name="entity"></param>
			<param name="flag"></param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreErrorDescriber.PropertyIsNull(System.String)">
			<summary>
				属性为空
			</summary>
			<param name="propertyName">属性名</param>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.StoreError">
			<summary>
				存储子系统错误封装
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreError.Code">
			<summary>
				错误编码
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreError.Description">
			<summary>
				错误描述
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.IStoreOptions">
			<summary>
				无键存储配置接口
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreOptions.AutoSaveChanges">
			<summary>
				是否启用自动保存
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreOptions.DebugLogger">
			<summary>
				是否启用Debug日志
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreOptions.MetaDataHosting">
			<summary>
				是否启用元数据托管
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreOptions.SoftDelete">
			<summary>
				是否启用软删除
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreOptions.HandlerHosting">
			<summary>
				是否启用操作员托管
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreOptions.CachedStore">
			<summary>
				是否启用具缓存策略
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreOptions.Expires">
			<summary>
				过期时间(秒)
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.StoreOptions">
			<summary>
				无键存储配置
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreOptions.AutoSaveChanges">
			<summary>
				是否启用自动保存
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreOptions.DebugLogger">
			<summary>
				是否启用Debug日志
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreOptions.MetaDataHosting">
			<summary>
				是否启用元数据托管
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreOptions.SoftDelete">
			<summary>
				是否启用软删除
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreOptions.HandlerHosting">
			<summary>
				是否启用操作员托管
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreOptions.CachedStore">
			<summary>
				是否启用具缓存存储策略
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreOptions.Expires">
			<summary>
				过期时间(秒)
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.IStoreResult">
			<summary>
				存储操作结果接口
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreResult.Succeeded">
			<summary>
				指示操作是否成功的标志
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreResult.EffectRows">
			<summary>
				指示操作受影响行数
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.IStoreResult.Errors">
			<summary>
				包含存储过程中产生的所有错误的实例
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.StoreResult">
			<summary>
				存储操作结果
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreResult.Succeeded">
			<summary>
				指示操作是否成功的标志
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreResult.EffectRows">
			<summary>
				指示操作受影响行数
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreResult.Errors">
			<summary>
				包含存储过程中产生的所有错误的实例
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreResult.Describer">
			<summary>
				描述器
			</summary>
		</member>
		<member name="P:Artemis.Data.Store.StoreResult.DescribeCode">
			<summary>
				描述错误代码
			</summary>
			<returns></returns>
		</member>
		<member name="P:Artemis.Data.Store.StoreResult.DescribeError">
			<summary>
				描述错误
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.StoreResult.Success(System.Int32)">
			<summary>
				操作成功时返回结果
			</summary>
			<param name="effectRows">收影响行数</param>
		</member>
		<member name="M:Artemis.Data.Store.StoreResult.Failed(Artemis.Data.Store.StoreError[])">
			<summary>
				创建一个操作失败的实例
			</summary>
			<param name="errors">错误列表</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreResult.EntityFoundFailed(System.String,System.String)">
			<summary>
				实体已存在失败
			</summary>
			<param name="name">实体名</param>
			<param name="flag">判断标识</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreResult.EntityNotFoundFailed(System.String,System.String)">
			<summary>
				实体不存在失败
			</summary>
			<param name="name">实体名</param>
			<param name="flag">判断标识</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreResult.PropertyIsNullFailed(System.String)">
			<summary>
				属性为空失败
			</summary>
			<param name="propertyName">属性名</param>
			<returns></returns>
		</member>
		<member name="M:Artemis.Data.Store.StoreResult.ToString">
			<summary>
				ToString
			</summary>
			<returns></returns>
		</member>
		<member name="T:Artemis.Data.Store.ValueConverter.EnumerationValueConverter`1">
			<summary>
				枚举类型值转换器
			</summary>
			<typeparam name="T">枚举类</typeparam>
		</member>
		<member name="M:Artemis.Data.Store.ValueConverter.EnumerationValueConverter`1.#ctor">
			<summary>
				构造
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.ValueConverter.StringCollectionValueConverter">
			<summary>
				字符串集合值转换器
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.ValueConverter.StringCollectionValueConverter.#ctor">
			<summary>
				构造
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.ValueConverter.StringNormalizeValueConverter">
			<summary>
				字符串规范化值转换器
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.ValueConverter.StringNormalizeValueConverter.#ctor">
			<summary>
				构造
			</summary>
		</member>
		<member name="T:Artemis.Data.Store.ValueConverter.StringReverseValueConverter">
			<summary>
				字符串反转值转换器
			</summary>
		</member>
		<member name="M:Artemis.Data.Store.ValueConverter.StringReverseValueConverter.#ctor">
			<summary>
				构造
			</summary>
		</member>
	</members>
</doc>